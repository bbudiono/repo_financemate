name: E2E Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Specific test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - UIAutomationTests
          - PerformanceTests
          - StabilityTests

jobs:
  e2e-tests:
    name: Run E2E Tests
    runs-on: macos-14  # Latest macOS runner with Apple Silicon
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Create test artifacts directory
      run: |
        mkdir -p test_artifacts
        mkdir -p test_reports
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Resolve Package Dependencies
      run: |
        cd _macOS/FinanceMate
        xcodebuild -resolvePackageDependencies -project FinanceMate.xcodeproj
        
    - name: Build for Testing
      run: |
        cd _macOS/FinanceMate
        xcodebuild build-for-testing \
          -project FinanceMate.xcodeproj \
          -scheme FinanceMate \
          -destination 'platform=macOS' \
          -derivedDataPath build/
          
    - name: Run XCUITests for E2E
      id: xcuitests
      run: |
        cd _macOS/FinanceMate
        
        # Run the actual XCUITests
        xcodebuild test \
          -project FinanceMate.xcodeproj \
          -scheme FinanceMate \
          -destination 'platform=macOS' \
          -resultBundlePath test_reports/results.xcresult \
          -derivedDataPath build/ \
          -only-testing:FinanceMateUITests/AuthenticationE2ETests \
          | tee test_output.log
          
    - name: Process Test Results
      if: always()
      run: |
        cd _macOS/FinanceMate
        
        # Extract test results
        if [ -d "test_reports/results.xcresult" ]; then
          # Use xcresulttool to extract test results
          xcrun xcresulttool get --path test_reports/results.xcresult --format json > test_reports/results.json
          
          # Parse results
          python3 << 'EOF'
        import json
        import sys
        
        with open('test_reports/results.json', 'r') as f:
            data = json.load(f)
            
        # Extract test summary
        tests_run = 0
        tests_passed = 0
        tests_failed = 0
        
        # Parse the JSON structure (simplified - actual structure is more complex)
        # This is a placeholder - actual parsing would need to handle xcresult JSON format
        
        print(f"📊 Test Summary:")
        print(f"   Total: {tests_run}")
        print(f"   ✅ Passed: {tests_passed}")
        print(f"   ❌ Failed: {tests_failed}")
        EOF
        fi
        
    - name: Collect Screenshots
      if: always()
      run: |
        cd _macOS/FinanceMate
        
        # Find and collect screenshots
        echo "📸 Collecting screenshots..."
        
        # Screenshots from XCUITests
        find build/Logs/Test -name "*.png" -type f | while read screenshot; do
          cp "$screenshot" test_artifacts/
        done
        
        # Screenshots from test_artifacts directory
        ls -la test_artifacts/
        
        # Count screenshots
        screenshot_count=$(find test_artifacts -name "*.png" -type f | wc -l | tr -d ' ')
        echo "Found $screenshot_count screenshots"
        
    - name: Upload Test Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ github.run_id }}
        path: |
          _macOS/FinanceMate/test_artifacts/
          _macOS/FinanceMate/test_reports/
          _macOS/FinanceMate/test_output.log
        retention-days: 30
        
    - name: Generate Test Report
      if: always()
      run: |
        cd _macOS/FinanceMate
        
        # Generate markdown report
        cat > test_reports/e2e_test_report.md << 'EOF'
        # E2E Test Report
        
        **Run ID:** ${{ github.run_id }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## Test Execution Summary
        
        ### XCUITests
        - Status: ${{ steps.xcuitests.outcome }}
        - Target: AuthenticationE2ETests
        - Test Suite: ${{ github.event.inputs.test_suite || 'all' }}
        
        ## Screenshots
        
        Screenshots captured during test execution are available in the artifacts.
        
        ## Logs
        
        Full test logs are available in the artifacts:
        - `test_output.log` - XCUITest execution log
        - `results.xcresult` - Xcode test results bundle
        
        EOF
        
        echo "📄 Test report generated"
        
    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const outcome = '${{ steps.xcuitests.outcome }}';
          
          const comment = `## E2E Test Results
          
          **XCUITests:** ${outcome === 'success' ? '✅ Passed' : '❌ Failed'}
          
          [View test artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Fail if tests failed
      if: steps.xcuitests.outcome == 'failure'
      run: exit 1