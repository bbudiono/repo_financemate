import XCTest
import CoreData
@testable import FinanceMate

/**
 * SettingsViewModelTests.swift
 * 
 * Purpose: Comprehensive unit tests for SettingsViewModel following TDD methodology
 * Issues & Complexity Summary: Tests for user preferences, theme management, and settings persistence
 * Key Complexity Drivers:
 *   - Logic Scope (Est. LoC): ~150
 *   - Core Algorithm Complexity: Medium (UserDefaults integration)
 *   - Dependencies: 2 New (UserDefaults, Environment)
 *   - State Management Complexity: Medium (Multiple preference types)
 *   - Novelty/Uncertainty Factor: Low (Established patterns)
 * AI Pre-Task Self-Assessment: 85%
 * Problem Estimate: 80%
 * Initial Code Complexity Estimate: 75%
 * Final Code Complexity: TBD
 * Overall Result Score: TBD
 * Key Variances/Learnings: TBD
 * Last Updated: 2025-07-05
 */

// EMERGENCY FIX: Removed @MainActor to eliminate Swift Concurrency crashes
class SettingsViewModelTests: XCTestCase {
    
    var viewModel: SettingsViewModel!
    var userDefaults: UserDefaults!
    
    override func setUp() throws {
        try super.setUp()
        
        // Create test UserDefaults instance
        userDefaults = UserDefaults(suiteName: "test.settings.financemate")
        userDefaults.removePersistentDomain(forName: "test.settings.financemate")
        
        // Initialize ViewModel with test UserDefaults
        viewModel = SettingsViewModel(userDefaults: userDefaults)
    }
    
    override func tearDown() throws {
        userDefaults.removePersistentDomain(forName: "test.settings.financemate")
        viewModel = nil
        userDefaults = nil
        try super.tearDown()
    }
    
    // MARK: - Initialization Tests
    
    func testViewModelInitialization() {
        XCTAssertNotNil(viewModel)
        XCTAssertEqual(viewModel.theme, "System")
        XCTAssertEqual(viewModel.currency, "USD")
        XCTAssertTrue(viewModel.notifications)
        XCTAssertFalse(viewModel.isLoading)
        XCTAssertNil(viewModel.errorMessage)
    }
    
    func testViewModelDefaultValues() {
        let freshViewModel = SettingsViewModel(userDefaults: UserDefaults(suiteName: "fresh.test.settings"))
        XCTAssertEqual(freshViewModel.theme, "System")
        XCTAssertEqual(freshViewModel.currency, "USD")
        XCTAssertTrue(freshViewModel.notifications)
    }
    
    // MARK: - Theme Management Tests
    
    func testThemeUpdates() {
        viewModel.theme = "Dark"
        XCTAssertEqual(viewModel.theme, "Dark")
        XCTAssertEqual(userDefaults.string(forKey: "theme"), "Dark")
    }
    
    func testThemeOptions() {
        let validThemes = ["System", "Light", "Dark"]
        
        for theme in validThemes {
            viewModel.theme = theme
            XCTAssertEqual(viewModel.theme, theme)
            XCTAssertEqual(userDefaults.string(forKey: "theme"), theme)
        }
    }
    
    func testThemePersistence() {
        viewModel.theme = "Light"
        
        // Create new ViewModel instance to test persistence
        let newViewModel = SettingsViewModel(userDefaults: userDefaults)
        XCTAssertEqual(newViewModel.theme, "Light")
    }
    
    // MARK: - Currency Management Tests
    
    func testCurrencyUpdates() {
        viewModel.currency = "EUR"
        XCTAssertEqual(viewModel.currency, "EUR")
        XCTAssertEqual(userDefaults.string(forKey: "currency"), "EUR")
    }
    
    func testCurrencyOptions() {
        let validCurrencies = ["USD", "EUR", "GBP", "JPY", "AUD", "CAD"]
        
        for currency in validCurrencies {
            viewModel.currency = currency
            XCTAssertEqual(viewModel.currency, currency)
            XCTAssertEqual(userDefaults.string(forKey: "currency"), currency)
        }
    }
    
    func testCurrencyPersistence() {
        viewModel.currency = "GBP"
        
        // Create new ViewModel instance to test persistence
        let newViewModel = SettingsViewModel(userDefaults: userDefaults)
        XCTAssertEqual(newViewModel.currency, "GBP")
    }
    
    // MARK: - Notifications Management Tests
    
    func testNotificationToggle() {
        viewModel.notifications = false
        XCTAssertFalse(viewModel.notifications)
        XCTAssertFalse(userDefaults.bool(forKey: "notifications"))
        
        viewModel.notifications = true
        XCTAssertTrue(viewModel.notifications)
        XCTAssertTrue(userDefaults.bool(forKey: "notifications"))
    }
    
    func testNotificationsPersistence() {
        viewModel.notifications = false
        
        // Create new ViewModel instance to test persistence
        let newViewModel = SettingsViewModel(userDefaults: userDefaults)
        XCTAssertFalse(newViewModel.notifications)
    }
    
    // MARK: - Settings Reset Tests
    
    func testResetSettings() {
        // Modify all settings
        viewModel.theme = "Dark"
        viewModel.currency = "EUR"
        viewModel.notifications = false
        
        // Reset settings
        viewModel.resetSettings()
        
        // Verify reset to defaults
        XCTAssertEqual(viewModel.theme, "System")
        XCTAssertEqual(viewModel.currency, "USD")
        XCTAssertTrue(viewModel.notifications)
    }
    
    // MARK: - State Management Tests
    
    func testLoadingStateManagement() {
        XCTAssertFalse(viewModel.isLoading)
        
        // Simulate loading operation
        viewModel.isLoading = true
        XCTAssertTrue(viewModel.isLoading)
        
        viewModel.isLoading = false
        XCTAssertFalse(viewModel.isLoading)
    }
    
    func testErrorStateHandling() {
        XCTAssertNil(viewModel.errorMessage)
        
        viewModel.errorMessage = "Test error message"
        XCTAssertEqual(viewModel.errorMessage, "Test error message")
        
        viewModel.clearError()
        XCTAssertNil(viewModel.errorMessage)
    }
    
    // MARK: - Performance Tests
    
    func testSettingsUpdatePerformance() {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        // Perform multiple settings updates
        for i in 0..<100 {
            viewModel.theme = i % 2 == 0 ? "Light" : "Dark"
            viewModel.currency = i % 3 == 0 ? "USD" : "EUR"
            viewModel.notifications = i % 2 == 0
        }
        
        let timeElapsed = CFAbsoluteTimeGetCurrent() - startTime
        XCTAssertLessThan(timeElapsed, 1.0, "Settings updates should complete within 1 second")
    }
    
    // MARK: - Published Properties Tests
    
    func testPublishedPropertiesUpdating() {
        let expectation = XCTestExpectation(description: "Published properties should trigger updates")
        
        var updateCount = 0
        let cancellable = viewModel.objectWillChange.sink {
            updateCount += 1
            if updateCount >= 3 {
                expectation.fulfill()
            }
        }
        
        viewModel.theme = "Dark"
        viewModel.currency = "EUR"
        viewModel.notifications = false
        
        fulfillment(of: [expectation], timeout: 1.0)
        cancellable.cancel()
        XCTAssertGreaterThanOrEqual(updateCount, 3)
    }
    
    // MARK: - Settings Validation Tests
    
    func testValidateSettingsWithValidData() {
        // Test with valid default settings
        XCTAssertTrue(viewModel.validateSettings())
        
        // Test with valid theme and currency combinations
        viewModel.theme = "Light"
        viewModel.currency = "EUR"
        XCTAssertTrue(viewModel.validateSettings())
        
        viewModel.theme = "Dark"
        viewModel.currency = "GBP"
        XCTAssertTrue(viewModel.validateSettings())
    }
    
    func testValidateSettingsWithInvalidData() {
        // Test with invalid theme (simulated by direct property manipulation)
        // Note: In practice, invalid themes would need to be set through different means
        // since the published property setters use validation
        let invalidUserDefaults = UserDefaults(suiteName: "invalid.test.settings")
        invalidUserDefaults.set("InvalidTheme", forKey: "theme")
        invalidUserDefaults.set("InvalidCurrency", forKey: "currency")
        
        let invalidViewModel = SettingsViewModel(userDefaults: invalidUserDefaults)
        XCTAssertFalse(invalidViewModel.validateSettings())
        
        // Clean up
        invalidUserDefaults.removePersistentDomain(forName: "invalid.test.settings")
    }
    
    // MARK: - Settings Save Tests
    
    func testSaveSettings() {
        // Modify settings
        viewModel.theme = "Dark"
        viewModel.currency = "EUR"
        viewModel.notifications = false
        
        // Call explicit save
        viewModel.saveSettings()
        
        // Verify all settings are saved
        XCTAssertEqual(userDefaults.string(forKey: "theme"), "Dark")
        XCTAssertEqual(userDefaults.string(forKey: "currency"), "EUR")
        XCTAssertFalse(userDefaults.bool(forKey: "notifications"))
    }
    
    func testSaveSettingsEnsuresSynchronization() {
        // Create separate UserDefaults to test synchronization
        let testDefaults = UserDefaults(suiteName: "sync.test.settings")
        let syncViewModel = SettingsViewModel(userDefaults: testDefaults)
        
        syncViewModel.theme = "Light"
        syncViewModel.currency = "CAD"
        syncViewModel.notifications = true
        
        // Save and verify synchronization occurred
        syncViewModel.saveSettings()
        
        // Verify settings persisted
        XCTAssertEqual(testDefaults.string(forKey: "theme"), "Light")
        XCTAssertEqual(testDefaults.string(forKey: "currency"), "CAD")
        XCTAssertTrue(testDefaults.bool(forKey: "notifications"))
        
        // Clean up
        testDefaults.removePersistentDomain(forName: "sync.test.settings")
    }
    
    // MARK: - Settings Export Tests
    
    func testExportSettings() {
        // Set specific values
        viewModel.theme = "Dark"
        viewModel.currency = "EUR"
        viewModel.notifications = false
        
        // Export settings
        let exportedData = viewModel.exportSettings()
        
        // Verify exported data
        XCTAssertEqual(exportedData["theme"] as? String, "Dark")
        XCTAssertEqual(exportedData["currency"] as? String, "EUR")
        XCTAssertEqual(exportedData["notifications"] as? Bool, false)
        XCTAssertEqual(exportedData.count, 3)
    }
    
    func testExportSettingsWithDefaultValues() {
        // Test export with default values
        let exportedData = viewModel.exportSettings()
        
        XCTAssertEqual(exportedData["theme"] as? String, "System")
        XCTAssertEqual(exportedData["currency"] as? String, "USD")
        XCTAssertEqual(exportedData["notifications"] as? Bool, true)
    }
    
    // MARK: - Settings Import Tests
    
    func testImportValidSettings() {
        let importData: [String: Any] = [
            "theme": "Light",
            "currency": "AUD",
            "notifications": false
        ]
        
        // Import settings
        viewModel.importSettings(from: importData)
        
        // Verify imported values
        XCTAssertEqual(viewModel.theme, "Light")
        XCTAssertEqual(viewModel.currency, "AUD")
        XCTAssertFalse(viewModel.notifications)
    }
    
    func testImportInvalidSettings() {
        // Store original values
        let originalTheme = viewModel.theme
        let originalCurrency = viewModel.currency
        let originalNotifications = viewModel.notifications
        
        let invalidImportData: [String: Any] = [
            "theme": "InvalidTheme",
            "currency": "INVALID",
            "notifications": "not a boolean"
        ]
        
        // Import invalid settings
        viewModel.importSettings(from: invalidImportData)
        
        // Verify values remain unchanged
        XCTAssertEqual(viewModel.theme, originalTheme)
        XCTAssertEqual(viewModel.currency, originalCurrency)
        XCTAssertEqual(viewModel.notifications, originalNotifications)
    }
    
    func testImportPartialSettings() {
        // Set initial values
        viewModel.theme = "Dark"
        viewModel.currency = "EUR"
        viewModel.notifications = false
        
        let partialImportData: [String: Any] = [
            "theme": "Light",
            "currency": "GBP"
            // notifications intentionally omitted
        ]
        
        // Import partial settings
        viewModel.importSettings(from: partialImportData)
        
        // Verify only provided values changed
        XCTAssertEqual(viewModel.theme, "Light")
        XCTAssertEqual(viewModel.currency, "GBP")
        XCTAssertFalse(viewModel.notifications) // Should remain unchanged
    }
    
    // MARK: - Theme Display Name Tests
    
    func testThemeDisplayNameMapping() {
        // Test all theme display names
        viewModel.theme = "System"
        XCTAssertEqual(viewModel.themeDisplayName(), "Follow System")
        
        viewModel.theme = "Light"
        XCTAssertEqual(viewModel.themeDisplayName(), "Light Mode")
        
        viewModel.theme = "Dark"
        XCTAssertEqual(viewModel.themeDisplayName(), "Dark Mode")
    }
    
    func testThemeDisplayNameWithUnknownTheme() {
        // Set up scenario with unknown theme (for testing edge case)
        let customDefaults = UserDefaults(suiteName: "custom.theme.test")
        customDefaults.set("CustomTheme", forKey: "theme")
        
        let customViewModel = SettingsViewModel(userDefaults: customDefaults)
        XCTAssertEqual(customViewModel.themeDisplayName(), "CustomTheme")
        
        // Clean up
        customDefaults.removePersistentDomain(forName: "custom.theme.test")
    }
    
    // MARK: - Currency Symbol Tests
    
    func testCurrencySymbolMapping() {
        // Test all currency symbols
        viewModel.currency = "USD"
        XCTAssertEqual(viewModel.currencySymbol(), "$")
        
        viewModel.currency = "EUR"
        XCTAssertEqual(viewModel.currencySymbol(), "€")
        
        viewModel.currency = "GBP"
        XCTAssertEqual(viewModel.currencySymbol(), "£")
        
        viewModel.currency = "JPY"
        XCTAssertEqual(viewModel.currencySymbol(), "¥")
        
        viewModel.currency = "AUD"
        XCTAssertEqual(viewModel.currencySymbol(), "A$")
        
        viewModel.currency = "CAD"
        XCTAssertEqual(viewModel.currencySymbol(), "C$")
    }
    
    func testCurrencySymbolWithUnknownCurrency() {
        // Set up scenario with unknown currency
        let customDefaults = UserDefaults(suiteName: "custom.currency.test")
        customDefaults.set("XYZ", forKey: "currency")
        
        let customViewModel = SettingsViewModel(userDefaults: customDefaults)
        XCTAssertEqual(customViewModel.currencySymbol(), "XYZ")
        
        // Clean up
        customDefaults.removePersistentDomain(forName: "custom.currency.test")
    }
    
    // MARK: - Apply Theme Tests
    
    func testApplyThemeReturnsCorrectColorScheme() {
        // Test Light theme
        viewModel.theme = "Light"
        XCTAssertEqual(viewModel.applyTheme(), .light)
        
        // Test Dark theme
        viewModel.theme = "Dark"
        XCTAssertEqual(viewModel.applyTheme(), .dark)
        
        // Test System theme (should return nil for system default)
        viewModel.theme = "System"
        XCTAssertNil(viewModel.applyTheme())
    }
    
    func testApplyThemeWithUnknownTheme() {
        // Set up scenario with unknown theme
        let customDefaults = UserDefaults(suiteName: "custom.apply.test")
        customDefaults.set("UnknownTheme", forKey: "theme")
        
        let customViewModel = SettingsViewModel(userDefaults: customDefaults)
        XCTAssertNil(customViewModel.applyTheme()) // Should default to nil (system)
        
        // Clean up
        customDefaults.removePersistentDomain(forName: "custom.apply.test")
    }
}