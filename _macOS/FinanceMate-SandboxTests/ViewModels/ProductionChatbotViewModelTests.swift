// Production ChatbotViewModel Integration Tests
// Generated by MCP Integration Automation
// Date: 2025-08-08 22:52:30
// Status: COMPREHENSIVE TEST COVERAGE

import XCTest
import CoreData
@testable import FinanceMate

final class ProductionChatbotViewModelTests: XCTestCase {
    
    var viewModel: ProductionChatbotViewModel!
    var testContext: NSManagedObjectContext!
    
    override func setUp() {
        super.setUp()
        testContext = PersistenceController.preview.container.viewContext
        viewModel = ProductionChatbotViewModel(context: testContext)
    }
    
    override func tearDown() {
        viewModel = nil
        testContext = nil
        super.tearDown()
    }
    
    // MARK: - Basic Functionality Tests
    
    func testInitialization() {
        XCTAssertNotNil(viewModel)
        XCTAssertEqual(viewModel.messages.count, 1) // Welcome message
        XCTAssertFalse(viewModel.isProcessing)
        XCTAssertTrue(viewModel.isDrawerVisible)
        XCTAssertEqual(viewModel.currentInput, "")
        XCTAssertEqual(viewModel.totalQuestions, 0)
    }
    
    // MARK: - Australian Financial Knowledge Tests
    
    func testAustralianCapitalGainsTaxResponse() async {
        viewModel.currentInput = "What are the capital gains tax implications of selling my investment property in NSW?"
        
        await viewModel.sendMessage()
        
        XCTAssertEqual(viewModel.messages.count, 3) // Welcome + User + Assistant
        let response = viewModel.messages.last!
        XCTAssertEqual(response.role, .assistant)
        XCTAssertTrue(response.content.contains("NSW"))
        XCTAssertTrue(response.content.contains("CGT"))
        XCTAssertTrue(response.hasData)
        XCTAssertNotNil(response.qualityScore)
        XCTAssertGreaterThan(response.qualityScore!, 6.0)
    }
    
    func testNegativeGearingResponse() async {
        viewModel.currentInput = "How does negative gearing work with Australian property investment?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertTrue(response.content.contains("negative gearing"))
        XCTAssertTrue(response.content.contains("Australia"))
        XCTAssertTrue(response.content.contains("taxable income"))
        XCTAssertEqual(response.questionType, .australianTax)
    }
    
    func testSMSFResponse() async {
        viewModel.currentInput = "What's the difference between SMSF and industry super funds?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertTrue(response.content.contains("Self-Managed Super Funds"))
        XCTAssertTrue(response.content.contains("industry super funds"))
        XCTAssertTrue(response.content.contains("$200,000"))
    }
    
    // MARK: - FinanceMate Integration Tests
    
    func testNetWealthTracking() async {
        viewModel.currentInput = "How can FinanceMate help me track my net wealth over time?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertTrue(response.content.contains("FinanceMate"))
        XCTAssertTrue(response.content.contains("net wealth"))
        XCTAssertTrue(response.content.contains("dashboard"))
        XCTAssertEqual(response.questionType, .financeMateSpecific)
        XCTAssertEqual(response.actionType, .showDashboard)
    }
    
    func testTransactionCategorization() async {
        viewModel.currentInput = "What's the best way to categorize transactions in FinanceMate?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertTrue(response.content.contains("categorization"))
        XCTAssertTrue(response.content.contains("customizable categories"))
        XCTAssertTrue(response.content.contains("patterns"))
    }
    
    // MARK: - Basic Financial Literacy Tests
    
    func testAssetsAndLiabilities() async {
        viewModel.currentInput = "What is the difference between assets and liabilities?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertTrue(response.content.contains("Assets"))
        XCTAssertTrue(response.content.contains("liabilities"))
        XCTAssertTrue(response.content.contains("net worth"))
        XCTAssertEqual(response.questionType, .basicLiteracy)
    }
    
    func testBudgetCreation() async {
        viewModel.currentInput = "How do I create my first budget?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertTrue(response.content.contains("budget"))
        XCTAssertTrue(response.content.contains("50/30/20"))
        XCTAssertTrue(response.content.contains("income"))
    }
    
    // MARK: - Quality Scoring Tests
    
    func testQualityScoreCalculation() async {
        viewModel.currentInput = "What are the capital gains tax implications of selling my investment property in NSW?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertNotNil(response.qualityScore)
        XCTAssertGreaterThan(response.qualityScore!, 5.0)
        XCTAssertLessThanOrEqual(response.qualityScore!, 10.0)
        XCTAssertEqual(viewModel.totalQuestions, 1)
        XCTAssertGreaterThan(viewModel.averageQualityScore, 0.0)
    }
    
    func testResponseTimeTracking() async {
        viewModel.currentInput = "How does compound interest work?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertNotNil(response.responseTime)
        XCTAssertGreaterThan(response.responseTime!, 0.0)
        XCTAssertLessThan(response.responseTime!, 1.0) // Should be very fast
    }
    
    // MARK: - Question Classification Tests
    
    func testComplexScenarioClassification() async {
        viewModel.currentInput = "I have $500K in assets, $200K mortgage, earn $150K - what's my optimal investment strategy?"
        
        await viewModel.sendMessage()
        
        let response = viewModel.messages.last!
        XCTAssertEqual(response.questionType, .complexScenarios)
        XCTAssertTrue(response.content.contains("sophisticated"))
        XCTAssertTrue(response.content.contains("professional"))
    }
    
    // MARK: - Error Handling Tests
    
    func testEmptyMessageHandling() {
        viewModel.currentInput = ""
        let initialMessageCount = viewModel.messages.count
        
        viewModel.sendMessage()
        
        // Should not add any messages for empty input
        XCTAssertEqual(viewModel.messages.count, initialMessageCount)
    }
    
    func testWhitespaceMessageHandling() {
        viewModel.currentInput = "   \n\t  "
        let initialMessageCount = viewModel.messages.count
        
        viewModel.sendMessage()
        
        // Should not add any messages for whitespace-only input
        XCTAssertEqual(viewModel.messages.count, initialMessageCount)
    }
    
    // MARK: - Performance Tests
    
    func testResponsePerformance() async {
        measure {
            viewModel.currentInput = "What is compound interest?"
            
            Task {
                await viewModel.sendMessage()
            }
        }
    }
    
    func testMemoryUsage() async {
        // Add 50 messages to test memory management
        for i in 1...50 {
            viewModel.currentInput = "Question \(i): What is a budget?"
            await viewModel.sendMessage()
        }
        
        // Verify all messages are tracked
        XCTAssertEqual(viewModel.messages.count, 101) // Welcome + 50 questions + 50 responses
        XCTAssertEqual(viewModel.totalQuestions, 50)
        
        // Clear and verify cleanup
        viewModel.clearConversation()
        XCTAssertEqual(viewModel.messages.count, 1) // Only welcome message
        XCTAssertEqual(viewModel.totalQuestions, 0)
    }
}
