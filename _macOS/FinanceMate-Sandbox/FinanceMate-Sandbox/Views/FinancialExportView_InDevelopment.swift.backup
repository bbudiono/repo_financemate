// SANDBOX FILE: For testing/development. See .cursorrules.
//
// FinancialExportView.swift
// FinanceMate-Sandbox
//
// Purpose: Comprehensive financial export and reporting view with multiple format support and real Core Data integration
// Issues & Complexity Summary: Advanced UI for financial data export with filtering, preview, and multi-format generation
// Key Complexity Drivers:
//   - Logic Scope (Est. LoC): ~550
//   - Core Algorithm Complexity: Medium-High (UI state management, data filtering, export coordination)
//   - Dependencies: 5 New (SwiftUI, Core Data, Export services, File management, Progress tracking)
//   - State Management Complexity: High (export configuration, progress tracking, file handling)
//   - Novelty/Uncertainty Factor: Medium (complex UI interactions, file export flows)
// AI Pre-Task Self-Assessment (Est. Solution Difficulty %): 75%
// Problem Estimate (Inherent Problem Difficulty %): 73%
// Initial Code Complexity Estimate %: 74%
// Justification for Estimates: Complex UI with multiple export options and real-time data integration, building on solid service foundation
// Final Code Complexity (Actual %): TBD
// Overall Result Score (Success & Quality %): TBD
// Key Variances/Learnings: TBD
// Last Updated: 2025-06-04

import SwiftUI
import CoreData
import Combine

struct FinancialExportView: View {
    @Environment(\.managedObjectContext) private var viewContext
    
    // Core Data fetch for all financial data
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \FinancialData.invoiceDate, ascending: false)],
        animation: .default)
    private var allFinancialData: FetchedResults<FinancialData>
    
    // Export configuration state
    @State private var selectedFormat: ExportFormat = .csv
    @State private var startDate: Date = Calendar.current.date(byAdding: .month, value: -1, to: Date()) ?? Date()
    @State private var endDate: Date = Date()
    @State private var selectedCategories: Set<String> = []
    @State private var includeMetadata: Bool = true
    @State private var includeCharts: Bool = false
    
    // Amount filtering
    @State private var enableAmountFilter: Bool = false
    @State private var minAmount: String = "0"
    @State private var maxAmount: String = "10000"
    
    // Transaction type filtering
    @State private var selectedTransactionType: TransactionType = .all
    
    // Export state
    @State private var isExporting: Bool = false
    @State private var exportProgress: Double = 0.0
    @State private var showingExportResult: Bool = false
    @State private var exportResult: ExportResult?
    @State private var showingPreview: Bool = false
    
    // UI state
    @State private var showingAdvancedFilters: Bool = false
    @State private var showingHelpSheet: Bool = false
    
    // Export services
    @StateObject private var exportManager = FinancialExportManager()
    
    // Available categories from data (simplified for Sandbox since categories aren't in Core Data model)
    private var availableCategories: [String] {
        ["General", "Business", "Office Supplies", "Travel", "Marketing", "Utilities"]
    }
    
    // Filtered data preview
    private var filteredDataPreview: [FinancialData] {
        let filterService = ExportFilterService()
        var filtered = Array(allFinancialData)
        
        // Apply date range filter
        filtered = filterService.filterByDateRange(filtered, start: startDate, end: endDate)
        
        // Apply category filter
        if !selectedCategories.isEmpty {
            filtered = filterService.filterByCategories(filtered, categories: Array(selectedCategories))
        }
        
        // Apply amount filter
        if enableAmountFilter,
           let min = Double(minAmount),
           let max = Double(maxAmount) {
            filtered = filterService.filterByAmountRange(filtered, min: min, max: max)
        }
        
        // Apply transaction type filter
        filtered = filterService.filterByType(filtered, type: selectedTransactionType)
        
        return filtered
    }
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // SANDBOX Header with watermark
                headerSection
                
                Divider()
                
                // Main content
                ScrollView {
                    VStack(spacing: 20) {
                        exportFormatSection
                        dateRangeSection
                        categoryFilterSection
                        advancedFiltersSection
                        dataPreviewSection
                        exportActionSection
                    }
                    .padding()
                }
            }
        }
        .navigationTitle("ðŸ§ª Financial Export (SANDBOX)")
        .toolbar {
            ToolbarItem(placement: .primaryAction) {
                Button("Help") {
                    showingHelpSheet = true
                }
            }
        }
        .sheet(isPresented: $showingExportResult) {
            exportResultSheet
        }
        .sheet(isPresented: $showingPreview) {
            dataPreviewSheet
        }
        .sheet(isPresented: $showingHelpSheet) {
            helpSheet
        }
        .onAppear {
            exportManager.setContext(viewContext)
        }
    }
    
    // MARK: - Header Section
    
    private var headerSection: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                Text("Financial Data Export")
                    .font(.title2)
                    .fontWeight(.semibold)
                
                Text("Export your financial data in multiple formats")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            // SANDBOX Watermark
            HStack {
                Text("ðŸ§ª SANDBOX")
                    .font(.caption)
                    .fontWeight(.bold)
                    .foregroundColor(.orange)
                    .padding(8)
                    .background(Color.orange.opacity(0.2))
                    .cornerRadius(8)
                
                Text("Testing Mode")
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
        }
        .padding()
        .background(Color(NSColor.controlBackgroundColor))
    }
    
    // MARK: - Export Format Section
    
    private var exportFormatSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Export Format")
                .font(.headline)
            
            HStack(spacing: 15) {
                ForEach(ExportFormat.allCases) { format in
                    Button(action: {
                        selectedFormat = format
                    }) {
                        HStack {
                            Image(systemName: iconForFormat(format))
                                .foregroundColor(selectedFormat == format ? .white : .blue)
                            
                            VStack(alignment: .leading, spacing: 2) {
                                Text(format.rawValue)
                                    .fontWeight(.medium)
                                    .foregroundColor(selectedFormat == format ? .white : .primary)
                                
                                Text(descriptionForFormat(format))
                                    .font(.caption)
                                    .foregroundColor(selectedFormat == format ? .white.opacity(0.8) : .secondary)
                            }
                        }
                        .padding(.horizontal, 12)
                        .padding(.vertical, 8)
                        .background(selectedFormat == format ? Color.blue : Color.gray.opacity(0.1))
                        .cornerRadius(8)
                    }
                    .buttonStyle(.plain)
                }
            }
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
    
    // MARK: - Date Range Section
    
    private var dateRangeSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Date Range")
                .font(.headline)
            
            HStack {
                VStack(alignment: .leading) {
                    Text("Start Date")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    DatePicker("", selection: $startDate, displayedComponents: .date)
                        .datePickerStyle(.compact)
                }
                
                Spacer()
                
                VStack(alignment: .leading) {
                    Text("End Date")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    DatePicker("", selection: $endDate, displayedComponents: .date)
                        .datePickerStyle(.compact)
                }
            }
            
            // Quick date range buttons
            HStack {
                Button("Last 30 Days") {
                    startDate = Calendar.current.date(byAdding: .day, value: -30, to: Date()) ?? Date()
                    endDate = Date()
                }
                .buttonStyle(.bordered)
                .controlSize(.small)
                
                Button("Last 3 Months") {
                    startDate = Calendar.current.date(byAdding: .month, value: -3, to: Date()) ?? Date()
                    endDate = Date()
                }
                .buttonStyle(.bordered)
                .controlSize(.small)
                
                Button("This Year") {
                    startDate = Calendar.current.dateInterval(of: .year, for: Date())?.start ?? Date()
                    endDate = Date()
                }
                .buttonStyle(.bordered)
                .controlSize(.small)
                
                Spacer()
            }
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
    
    // MARK: - Category Filter Section
    
    private var categoryFilterSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Categories")
                .font(.headline)
            
            if availableCategories.isEmpty {
                Text("No categories found in your financial data")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .padding()
                    .background(Color.yellow.opacity(0.1))
                    .cornerRadius(8)
            } else {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack {
                        Button(selectedCategories.isEmpty ? "All Categories" : "Clear Selection") {
                            selectedCategories.removeAll()
                        }
                        .buttonStyle(.bordered)
                        .controlSize(.small)
                        
                        ForEach(availableCategories, id: \.self) { category in
                            Button(action: {
                                if selectedCategories.contains(category) {
                                    selectedCategories.remove(category)
                                } else {
                                    selectedCategories.insert(category)
                                }
                            }) {
                                Text(category)
                                    .foregroundColor(selectedCategories.contains(category) ? .white : .primary)
                            }
                            .buttonStyle(.bordered)
                            .controlSize(.small)
                            .background(selectedCategories.contains(category) ? Color.blue : Color.clear)
                            .cornerRadius(6)
                        }
                    }
                    .padding(.horizontal)
                }
            }
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
    
    // MARK: - Advanced Filters Section
    
    private var advancedFiltersSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            DisclosureGroup("Advanced Filters", isExpanded: $showingAdvancedFilters) {
                VStack(alignment: .leading, spacing: 16) {
                    // Transaction Type Filter
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Transaction Type")
                            .font(.subheadline)
                            .fontWeight(.medium)
                        
                        Picker("Transaction Type", selection: $selectedTransactionType) {
                            Text("All Transactions").tag(TransactionType.all)
                            Text("Income Only").tag(TransactionType.income)
                            Text("Expenses Only").tag(TransactionType.expense)
                        }
                        .pickerStyle(.segmented)
                    }
                    
                    // Amount Range Filter
                    VStack(alignment: .leading, spacing: 8) {
                        Toggle("Filter by Amount Range", isOn: $enableAmountFilter)
                            .fontWeight(.medium)
                        
                        if enableAmountFilter {
                            HStack {
                                VStack(alignment: .leading) {
                                    Text("Minimum Amount")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                    TextField("0.00", text: $minAmount)
                                        .textFieldStyle(.roundedBorder)
                                }
                                
                                VStack(alignment: .leading) {
                                    Text("Maximum Amount")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                    TextField("10000.00", text: $maxAmount)
                                        .textFieldStyle(.roundedBorder)
                                }
                            }
                        }
                    }
                    
                    // Export Options
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Export Options")
                            .font(.subheadline)
                            .fontWeight(.medium)
                        
                        Toggle("Include Metadata", isOn: $includeMetadata)
                        
                        if selectedFormat == .pdf {
                            Toggle("Include Charts", isOn: $includeCharts)
                        }
                    }
                }
                .padding(.top)
            }
            .font(.headline)
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
    
    // MARK: - Data Preview Section
    
    private var dataPreviewSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text("Data Preview")
                    .font(.headline)
                
                Spacer()
                
                Button("Full Preview") {
                    showingPreview = true
                }
                .buttonStyle(.bordered)
                .controlSize(.small)
            }
            
            if filteredDataPreview.isEmpty {
                Text("No financial data matches your current filters")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .padding()
                    .background(Color.yellow.opacity(0.1))
                    .cornerRadius(8)
            } else {
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Text("Records to Export: \\(filteredDataPreview.count)")
                            .fontWeight(.medium)
                        
                        Spacer()
                        
                        let income = filteredDataPreview.compactMap { $0.totalAmount?.doubleValue }.filter { $0 > 0 }.reduce(0, +)
                        let expenses = abs(filteredDataPreview.compactMap { $0.totalAmount?.doubleValue }.filter { $0 < 0 }.reduce(0, +))
                        
                        Text("Income: $\(String(format: "%.2f", income)) â€¢ Expenses: $\(String(format: "%.2f", expenses))")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    // Show first few records
                    ForEach(filteredDataPreview.prefix(3), id: \.id) { record in
                        HStack {
                            Text(record.invoiceNumber ?? "Unknown")
                                .font(.caption)
                                .fontWeight(.medium)
                            
                            Spacer()
                            
                            Text("$\(String(format: "%.2f", record.totalAmount?.doubleValue ?? 0.0))")
                                .font(.caption)
                                .foregroundColor(record.totalAmount?.doubleValue ?? 0 >= 0 ? .green : .red)
                            
                            Text("General") // Default category since not in Core Data model
                                .font(.caption)
                                .foregroundColor(.secondary)
                                .frame(width: 100, alignment: .trailing)
                        }
                        .padding(.vertical, 2)
                    }
                    
                    if filteredDataPreview.count > 3 {
                        Text("... and \(filteredDataPreview.count - 3) more records")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                .padding()
                .background(Color.gray.opacity(0.1))
                .cornerRadius(8)
            }
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
    
    // MARK: - Export Action Section
    
    private var exportActionSection: some View {
        VStack(spacing: 16) {
            if isExporting {
                VStack(spacing: 8) {
                    ProgressView(value: exportProgress)
                        .progressViewStyle(LinearProgressViewStyle())
                    
                    Text("ðŸ§ª SANDBOX: Exporting \\(selectedFormat.rawValue) file... \\(Int(exportProgress * 100))%")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            
            Button(action: performExport) {
                HStack {
                    Image(systemName: isExporting ? "arrow.down.circle" : "square.and.arrow.up")
                    Text(isExporting ? "Exporting..." : "Export \\(selectedFormat.rawValue)")
                }
                .frame(maxWidth: .infinity)
                .padding()
                .background(isExporting ? Color.gray : Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)
            }
            .disabled(isExporting || filteredDataPreview.isEmpty)
            .buttonStyle(.plain)
        }
    }
    
    // MARK: - Export Action
    
    private func performExport() {
        Task {
            await MainActor.run {
                isExporting = true
                exportProgress = 0.0
            }
            
            do {
                let request = ExportRequest(
                    format: selectedFormat,
                    dateRange: DateInterval(start: startDate, end: endDate),
                    includeCategories: !selectedCategories.isEmpty,
                    includeMetadata: includeMetadata,
                    categories: selectedCategories.isEmpty ? nil : Array(selectedCategories),
                    amountRange: enableAmountFilter ? AmountRange(min: Double(minAmount) ?? 0, max: Double(maxAmount) ?? 10000) : nil,
                    reportConfiguration: ReportConfiguration(
                        title: "SANDBOX Financial Report",
                        dateRange: DateInterval(start: startDate, end: endDate),
                        includeCharts: includeCharts
                    )
                )
                
                let result = try await exportManager.performExport(request: request)
                
                await MainActor.run {
                    exportResult = result
                    showingExportResult = true
                    isExporting = false
                }
                
            } catch {
                await MainActor.run {
                    exportResult = ExportResult(
                        fileURL: nil,
                        success: false,
                        recordCount: 0,
                        errorMessage: error.localizedDescription
                    )
                    showingExportResult = true
                    isExporting = false
                }
            }
        }
    }
    
    // MARK: - Helper Methods
    
    private func iconForFormat(_ format: ExportFormat) -> String {
        switch format {
        case .csv: return "tablecells"
        case .pdf: return "doc.text"
        case .json: return "curlybraces"
        }
    }
    
    private func descriptionForFormat(_ format: ExportFormat) -> String {
        switch format {
        case .csv: return "Spreadsheet compatible"
        case .pdf: return "Professional report"
        case .json: return "Data backup format"
        }
    }
    
    // MARK: - Sheet Views
    
    private var exportResultSheet: some View {
        NavigationView {
            VStack(spacing: 20) {
                if let result = exportResult {
                    if result.success {
                        VStack(spacing: 16) {
                            Image(systemName: "checkmark.circle.fill")
                                .font(.system(size: 60))
                                .foregroundColor(.green)
                            
                            Text("ðŸ§ª SANDBOX Export Successful!")
                                .font(.title2)
                                .fontWeight(.semibold)
                            
                            Text("Exported \\(result.recordCount) records")
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                            
                            if let fileURL = result.fileURL {
                                Button("Open File Location") {
                                    NSWorkspace.shared.activateFileViewerSelecting([fileURL])
                                }
                                .buttonStyle(.borderedProminent)
                            }
                        }
                    } else {
                        VStack(spacing: 16) {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .font(.system(size: 60))
                                .foregroundColor(.red)
                            
                            Text("ðŸ§ª SANDBOX Export Failed")
                                .font(.title2)
                                .fontWeight(.semibold)
                            
                            Text(result.errorMessage ?? "Unknown error occurred")
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                                .multilineTextAlignment(.center)
                        }
                    }
                }
                
                Spacer()
            }
            .padding()
            .navigationTitle("ðŸ§ª Export Result")
            .toolbar {
                ToolbarItem(placement: .primaryAction) {
                    Button("Done") {
                        showingExportResult = false
                    }
                }
            }
        }
        .frame(width: 400, height: 300)
    }
    
    private var dataPreviewSheet: some View {
        NavigationView {
            List(filteredDataPreview.prefix(50), id: \.id) { record in
                VStack(alignment: .leading, spacing: 4) {
                    HStack {
                        Text(record.invoiceNumber ?? "Unknown")
                            .fontWeight(.medium)
                        
                        Spacer()
                        
                        Text("$\(String(format: "%.2f", record.totalAmount?.doubleValue ?? 0.0))")
                            .fontWeight(.medium)
                            .foregroundColor(record.totalAmount?.doubleValue ?? 0 >= 0 ? .green : .red)
                    }
                    
                    HStack {
                        Text("General") // Default category since not in Core Data model
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Spacer()
                        
                        if let date = record.invoiceDate {
                            Text(DateFormatter.localizedString(from: date, dateStyle: .short, timeStyle: .none))
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                }
                .padding(.vertical, 2)
            }
            .navigationTitle("ðŸ§ª Data Preview (\\(filteredDataPreview.count) records)")
            .toolbar {
                ToolbarItem(placement: .primaryAction) {
                    Button("Done") {
                        showingPreview = false
                    }
                }
            }
        }
        .frame(width: 600, height: 500)
    }
    
    private var helpSheet: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 16) {
                    Text("ðŸ§ª SANDBOX Financial Export Help")
                        .font(.title2)
                        .fontWeight(.semibold)
                    
                    VStack(alignment: .leading, spacing: 12) {
                        Text("Export Formats")
                            .font(.headline)
                        
                        VStack(alignment: .leading, spacing: 8) {
                            Text("â€¢ **CSV**: Excel-compatible spreadsheet format")
                            Text("â€¢ **PDF**: Professional formatted report")
                            Text("â€¢ **JSON**: Structured data for backups")
                        }
                        .font(.subheadline)
                    }
                    
                    VStack(alignment: .leading, spacing: 12) {
                        Text("Filtering Options")
                            .font(.headline)
                        
                        VStack(alignment: .leading, spacing: 8) {
                            Text("â€¢ **Date Range**: Export data from specific time periods")
                            Text("â€¢ **Categories**: Filter by transaction categories")
                            Text("â€¢ **Amount Range**: Include only transactions within amount limits")
                            Text("â€¢ **Transaction Type**: Income, expenses, or both")
                        }
                        .font(.subheadline)
                    }
                    
                    VStack(alignment: .leading, spacing: 12) {
                        Text("ðŸ§ª SANDBOX Mode")
                            .font(.headline)
                        
                        VStack(alignment: .leading, spacing: 8) {
                            Text("This is a testing environment. All exports are marked as SANDBOX versions.")
                            Text("Files are saved to your Documents folder.")
                            Text("No real financial data is transmitted externally.")
                        }
                        .font(.subheadline)
                        .foregroundColor(.orange)
                    }
                }
                .padding()
            }
            .navigationTitle("Help")
            .toolbar {
                ToolbarItem(placement: .primaryAction) {
                    Button("Done") {
                        showingHelpSheet = false
                    }
                }
            }
        }
        .frame(width: 500, height: 600)
    }
}