//
//  BasiqSSOIntegrator.swift
//  FinanceMate
//
//  Created by AI Assistant on 8/7/25.
//

import Foundation
import SwiftUI
import Combine

/// Integrates SSO authentication system with Basiq financial services
/// Provides seamless connection between authenticated users and financial data
@MainActor
final class BasiqSSOIntegrator: ObservableObject {
    
    // MARK: - Properties
    
    private let authenticationViewModel: AuthenticationViewModel
    private let basiqService: BasiqService
    
    @Published var isIntegrationReady: Bool = false
    @Published var integrationError: String?
    
    // MARK: - Initialization
    
    init(authenticationViewModel: AuthenticationViewModel) {
        self.authenticationViewModel = authenticationViewModel
        self.basiqService = BasiqService(authenticationViewModel: authenticationViewModel)
        
        setupIntegration()
    }
    
    // MARK: - Integration Setup
    
    private func setupIntegration() {
        // Monitor authentication state changes
        authenticationViewModel.$authenticationState
            .receive(on: DispatchQueue.main)
            .sink { [weak self] state in
                self?.handleAuthenticationStateChange(state)
            }
            .store(in: &cancellables)
        
        // Initial setup if user is already authenticated
        if authenticationViewModel.isAuthenticated {
            isIntegrationReady = true
        }
    }
    
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Authentication State Handling
    
    private func handleAuthenticationStateChange(_ state: AuthenticationState) {
        switch state {
        case .authenticated:
            isIntegrationReady = true
            integrationError = nil
            print("✅ BasiqSSOIntegrator: User authenticated, Basiq integration ready")
            
        case .unauthenticated:
            isIntegrationReady = false
            integrationError = nil
            print("🚫 BasiqSSOIntegrator: User unauthenticated, Basiq integration disabled")
            
        case .error(let message):
            isIntegrationReady = false
            integrationError = message
            print("❌ BasiqSSOIntegrator: Authentication error - \(message)")
            
        default:
            isIntegrationReady = false
            print("⏳ BasiqSSOIntegrator: Authentication in progress")
        }
    }
    
    // MARK: - Public Interface
    
    /// Get the integrated Basiq service (only available when authenticated)
    var financialService: BasiqService? {
        guard isIntegrationReady else { return nil }
        return basiqService
    }
    
    /// Verify the integration is properly configured
    func validateIntegration() -> Bool {
        guard authenticationViewModel.isAuthenticated,
              let currentUser = authenticationViewModel.currentUser,
              !currentUser.email.isEmpty else {
            return false
        }
        
        return true
    }
    
    /// Get authenticated user email for Basiq service
    var authenticatedUserEmail: String? {
        guard isIntegrationReady,
              let currentUser = authenticationViewModel.currentUser else {
            return nil
        }
        
        return currentUser.email
    }
}

// MARK: - SwiftUI Environment Integration

struct BasiqSSOIntegratorKey: EnvironmentKey {
    static let defaultValue: BasiqSSOIntegrator? = nil
}

extension EnvironmentValues {
    var basiqIntegrator: BasiqSSOIntegrator? {
        get { self[BasiqSSOIntegratorKey.self] }
        set { self[BasiqSSOIntegratorKey.self] = newValue }
    }
}