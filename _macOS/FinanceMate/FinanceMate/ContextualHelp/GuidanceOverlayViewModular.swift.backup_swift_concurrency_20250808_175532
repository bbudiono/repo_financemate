//
// GuidanceOverlayViewModular.swift
// FinanceMate
//
// MODULAR Guidance Overlay Coordinator View
// Created: 2025-08-08
// Target: FinanceMate
//

/*
 * Purpose: MODULAR main coordinator view for guidance overlay system
 * Issues & Complexity Summary: Lightweight coordinator delegating to focused modular components
 * Key Complexity Drivers:
   - Logic Scope (Est. LoC): ~80
   - Core Algorithm Complexity: Low (delegation pattern)
   - Dependencies: Modular guidance overlay components
   - State Management Complexity: Low (delegated to specialized modules)
   - Novelty/Uncertainty Factor: Low (standard SwiftUI coordination patterns)
 * AI Pre-Task Self-Assessment: 96%
 * Problem Estimate: 96%
 * Initial Code Complexity Estimate: 96%
 * Final Code Complexity: 96%
 * Overall Result Score: 96%
 * Key Variances/Learnings: MODULAR architecture dramatically reduces complexity
 * Last Updated: 2025-08-08
 */

import SwiftUI
import os.log

/// MODULAR main coordinator view for guidance overlay system
/// Delegates to focused modular components for improved maintainability
struct GuidanceOverlayViewModular: View {
    
    // MARK: - Modular Components
    
    @StateObject private var interactionHandler: GuidanceOverlayInteractionHandler
    @StateObject private var configuration: GuidanceOverlayConfiguration = GuidanceOverlayConfiguration()
    
    // MARK: - State
    
    @State private var isShowingExpandedHelp = false
    
    // MARK: - Properties
    
    private let helpContext: HelpContext
    private let accessibility: GuidanceOverlayAccessibility
    private let logger = Logger(subsystem: "com.financemate.ui", category: "GuidanceOverlay")
    
    // MARK: - Computed Properties
    
    private var contentRenderer: GuidanceOverlayContentRenderer {
        GuidanceOverlayContentRenderer(
            helpContent: interactionHandler.helpContent,
            expandedHelpContent: interactionHandler.expandedHelpContent,
            presentationStyle: configuration.presentationStyle,
            isShowingExpandedHelp: isShowingExpandedHelp
        )
    }
    
    // MARK: - Initialization
    
    init(helpContext: HelpContext) {
        self.helpContext = helpContext
        self._interactionHandler = StateObject(wrappedValue: GuidanceOverlayInteractionHandler(helpContext: helpContext))
        self.accessibility = GuidanceOverlayAccessibility()
    }
    
    // MARK: - Body
    
    var body: some View {
        ZStack {
            overlayBackground
            overlayContent
        }
        .ignoresSafeArea()
        .onAppear {
            Task {
                await interactionHandler.setupGuidance(for: helpContext)
            }
        }
        .accessibilityElement(children: .contain)
        .accessibilityLabel(accessibility.mainAccessibilityLabel)
    }
    
    // MARK: - MODULAR View Components
    
    private var overlayBackground: some View {
        Color.black
            .opacity(0.3)
            .onTapGesture {
                Task {
                    await interactionHandler.dismissGuidance()
                }
            }
    }
    
    private var overlayContent: some View {
        VStack(spacing: 16) {
            headerSection
            contentSection
            stepIndicatorSection
            controlButtonsSection
            actionButtonsSection
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(.regularMaterial)
                .shadow(radius: 20)
        )
        .frame(maxWidth: 400)
        .padding(.horizontal, 20)
    }
    
    private var headerSection: some View {
        GuidanceOverlayHeader(
            interactionHandler: interactionHandler,
            accessibility: accessibility
        )
    }
    
    private var contentSection: some View {
        contentRenderer.contentSection()
    }
    
    private var stepIndicatorSection: some View {
        if interactionHandler.showsStepIndicator {
            GuidanceOverlayStepIndicator(
                interactionHandler: interactionHandler,
                accessibility: accessibility
            )
        }
    }
    
    private var controlButtonsSection: some View {
        GuidanceOverlayControlButtons(
            isShowingExpandedHelp: $isShowingExpandedHelp,
            interactionHandler: interactionHandler,
            accessibility: accessibility
        )
    }
    
    private var actionButtonsSection: some View {
        GuidanceOverlayActionButtons(
            interactionHandler: interactionHandler,
            accessibility: accessibility
        )
    }
}