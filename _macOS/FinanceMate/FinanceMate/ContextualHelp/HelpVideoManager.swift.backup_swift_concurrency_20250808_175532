import Foundation
import OSLog

/// Video content management for help system
/// Focused responsibility: Handle video content generation and accessibility
@MainActor
final class HelpVideoManager: ObservableObject {
    
    // MARK: - Properties
    
    private let logger = Logger(subsystem: "com.financemate.help", category: "HelpVideoManager")
    private var isAccessibilityModeEnabled: Bool = false
    private var isOfflineModeEnabled: Bool = false
    
    // MARK: - Initialization
    
    init() {
        logger.debug("HelpVideoManager initialized")
    }
    
    // MARK: - Video Content Generation
    
    /// Generate video content for a specific help context
    func generateVideoContent(for context: HelpContext) -> VideoContent? {
        guard let url = Bundle.main.url(forResource: "\(context.rawValue)_help", withExtension: "mp4") else {
            logger.debug("No video content found for context: \(context.rawValue)")
            return nil
        }
        
        return VideoContent(
            title: "How to use \(context.rawValue.replacingOccurrences(of: "_", with: " "))",
            url: url,
            duration: getDurationForContext(context),
            hasSubtitles: true,
            hasAudioDescription: isAccessibilityModeEnabled
        )
    }
    
    /// Get all available video content for contexts
    func getAllVideoContent() -> [HelpContext: VideoContent] {
        var videoContent: [HelpContext: VideoContent] = [:]
        
        for context in HelpContext.allCases {
            if let video = generateVideoContent(for: context) {
                videoContent[context] = video
            }
        }
        
        return videoContent
    }
    
    /// Check if video content is available for a context
    func isVideoAvailable(for context: HelpContext) -> Bool {
        return Bundle.main.url(forResource: "\(context.rawValue)_help", withExtension: "mp4") != nil
    }
    
    /// Get video duration for a context
    func getVideoDuration(for context: HelpContext) -> TimeInterval {
        return getDurationForContext(context)
    }
    
    // MARK: - Accessibility Features
    
    /// Enable accessibility features for video content
    func enableAccessibilityMode(_ enabled: Bool) {
        self.isAccessibilityModeEnabled = enabled
        logger.info("Accessibility mode \(enabled ? "enabled" : "disabled") for video content")
    }
    
    /// Set offline mode for video content
    func setOfflineMode(_ enabled: Bool) {
        self.isOfflineModeEnabled = enabled
        logger.info("Offline mode \(enabled ? "enabled" : "disabled") for video content")
    }
    
    /// Check if video content is available offline
    func isContentAvailableOffline(for context: HelpContext) -> Bool {
        guard let url = Bundle.main.url(forResource: "\(context.rawValue)_help", withExtension: "mp4") else {
            return false
        }
        return FileManager.default.fileExists(atPath: url.path)
    }
    
    /// Get accessibility features status
    func getAccessibilityStatus() -> [String: Bool] {
        return [
            "accessibilityMode": isAccessibilityModeEnabled,
            "offlineMode": isOfflineModeEnabled,
            "subtitlesSupported": true,
            "audioDescriptionSupported": isAccessibilityModeEnabled
        ]
    }
    
    /// Get video content statistics
    func getVideoStatistics() -> [String: Any] {
        let availableVideos = HelpContext.allCases.compactMap { context in
            isVideoAvailable(for: context) ? context : nil
        }
        
        return [
            "totalContexts": HelpContext.allCases.count,
            "videosAvailable": availableVideos.count,
            "offlineCapable": availableVideos.filter { isContentAvailableOffline(for: $0) }.count,
            "accessibilityEnabled": isAccessibilityModeEnabled
        ]
    }
    
    // MARK: - Private Helper Methods
    
    private func getDurationForContext(_ context: HelpContext) -> TimeInterval {
        switch context {
        case .splitAllocation:
            return 180.0 // 3 minutes
        case .transactionEntry:
            return 120.0 // 2 minutes
        case .taxCategorySelection:
            return 90.0  // 1.5 minutes
        case .reporting:
            return 150.0 // 2.5 minutes
        case .analytics:
            return 120.0 // 2 minutes
        case .dashboard:
            return 90.0  // 1.5 minutes
        case .settings:
            return 60.0  // 1 minute
        }
    }
    
    /// Validate video file accessibility
    func validateVideoAccessibility(for context: HelpContext) -> Bool {
        guard let url = Bundle.main.url(forResource: "\(context.rawValue)_help", withExtension: "mp4") else {
            return false
        }
        
        // Check if file is readable
        return FileManager.default.isReadableFile(atPath: url.path)
    }
    
    /// Get video file size
    func getVideoFileSize(for context: HelpContext) -> Int64? {
        guard let url = Bundle.main.url(forResource: "\(context.rawValue)_help", withExtension: "mp4") else {
            return nil
        }
        
        do {
            let attributes = try FileManager.default.attributesOfItem(atPath: url.path)
            return attributes[.size] as? Int64
        } catch {
            logger.error("Failed to get video file size for \(context.rawValue): \(error)")
            return nil
        }
    }
}