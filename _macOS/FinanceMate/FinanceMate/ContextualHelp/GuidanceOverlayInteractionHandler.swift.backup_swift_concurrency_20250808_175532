//
// GuidanceOverlayInteractionHandler.swift
// FinanceMate
//
// User Interaction and State Management for Guidance Overlay
// Created: 2025-08-03
// Target: FinanceMate
//

/*
 * Purpose: User interaction handling and state management for guidance overlay
 * Issues & Complexity Summary: Async interactions, state management, animation coordination
 * Key Complexity Drivers:
   - Logic Scope (Est. LoC): ~120
   - Core Algorithm Complexity: Medium
   - Dependencies: SwiftUI, ContextualHelpSystem, Logger
   - State Management Complexity: Medium-High (interaction state, animations)
   - Novelty/Uncertainty Factor: Low (standard SwiftUI async patterns)
 * AI Pre-Task Self-Assessment: 85%
 * Problem Estimate: 85%
 * Initial Code Complexity Estimate: 85%
 * Final Code Complexity: 85%
 * Overall Result Score: 85%
 * Key Variances/Learnings: Async interaction patterns require careful MainActor coordination
 * Last Updated: 2025-08-03
 */

import SwiftUI
import os.log

/// User interaction handling and state management for guidance overlay
@MainActor
final class GuidanceOverlayInteractionHandler: ObservableObject {
    
    // MARK: - Published State Properties
    
    @Published var isPresented: Bool = false
    @Published var currentStepIndex: Int = 0
    @Published var isShowingExpandedHelp: Bool = false
    @Published var hasCompletedPresentationAnimation: Bool = false
    @Published var hasCompletedDismissalAnimation: Bool = false
    @Published var isCompleted: Bool = false
    @Published var completionTimestamp: Date?
    @Published var totalStepCount: Int = 1
    @Published var isUsingOfflineContent: Bool = false
    @Published var showsNetworkError: Bool = false
    @Published var showsPlaceholderContent: Bool = false
    @Published var showsErrorState: Bool = false
    
    // MARK: - Content State
    
    @Published var helpContent: HelpContent?
    @Published var expandedHelpContent: HelpContent?
    @Published var currentHelpContent: HelpContent?
    @Published var recordedInteractions: [UserInteraction] = []
    
    // MARK: - Dependencies
    
    private let contextualHelpSystem: ContextualHelpSystem
    private let helpContext: HelpContext
    private let logger = Logger(subsystem: "com.financemate.ui", category: "GuidanceOverlayInteractionHandler")
    
    // MARK: - Computed Properties
    
    var hasHelpButton: Bool { isPresented }
    var hasNextButton: Bool { isPresented && totalStepCount > 1 }
    var hasPreviousButton: Bool { isPresented && currentStepIndex > 0 }
    var hasStepIndicator: Bool { totalStepCount > 1 }
    
    // MARK: - Initialization
    
    init(contextualHelpSystem: ContextualHelpSystem, helpContext: HelpContext) {
        self.contextualHelpSystem = contextualHelpSystem
        self.helpContext = helpContext
    }
    
    // MARK: - Public Methods
    
    func presentGuidance() async {
        await MainActor.run {
            withAnimation(.spring(response: 0.6, dampingFraction: 0.8)) {
                self.isPresented = true
            }
        }
        
        await loadHelpContent()
        recordInteraction(.helpButtonTap)
        logger.info("Guidance overlay presented for context: \(helpContext.rawValue)")
    }
    
    func presentGuidanceWithAnimation() async {
        await presentGuidance()
    }
    
    func dismissGuidance() async {
        await MainActor.run {
            withAnimation(.spring(response: 0.4, dampingFraction: 0.9)) {
                self.isPresented = false
                self.hasCompletedDismissalAnimation = true
            }
        }
        
        recordInteraction(.dismissTap)
        logger.info("Guidance overlay dismissed")
    }
    
    func dismissGuidanceWithAnimation() async {
        await dismissGuidance()
    }
    
    func tapHelpButton() async {
        await MainActor.run {
            withAnimation(.easeInOut(duration: 0.3)) {
                self.isShowingExpandedHelp.toggle()
            }
        }
        
        if isShowingExpandedHelp && expandedHelpContent == nil {
            expandedHelpContent = await contextualHelpSystem.getContextualHelp(for: helpContext)
        }
        
        recordInteraction(.helpButtonTap)
        logger.debug("Help button tapped, expanded help: \(isShowingExpandedHelp)")
    }
    
    func tapNextButton() async {
        await MainActor.run {
            if self.currentStepIndex < self.totalStepCount - 1 {
                withAnimation(.easeInOut(duration: 0.3)) {
                    self.currentStepIndex += 1
                }
            } else {
                self.isCompleted = true
                self.completionTimestamp = Date()
            }
        }
        
        recordInteraction(.nextButtonTap)
        logger.debug("Next button tapped, current step: \(currentStepIndex)")
    }
    
    func tapPreviousButton() async {
        await MainActor.run {
            if self.currentStepIndex > 0 {
                withAnimation(.easeInOut(duration: 0.3)) {
                    self.currentStepIndex -= 1
                }
            }
        }
        
        recordInteraction(.previousButtonTap)
        logger.debug("Previous button tapped, current step: \(currentStepIndex)")
    }
    
    func refreshContent() async {
        await loadHelpContent()
        logger.debug("Content refreshed for context: \(helpContext.rawValue)")
    }
    
    func getCurrentHelpContent() async -> HelpContent? {
        return currentHelpContent
    }
    
    func onPresentationAppeared() {
        hasCompletedPresentationAnimation = true
    }
    
    // MARK: - Content Loading
    
    func loadHelpContent() async {
        do {
            let content = await contextualHelpSystem.getContextualHelp(for: helpContext)
            await MainActor.run {
                self.helpContent = content
                self.currentHelpContent = content
                self.totalStepCount = content.interactiveDemos.first?.steps.count ?? 1
                self.isUsingOfflineContent = content.isFromCache
                
                // Reset error states on successful load
                self.showsErrorState = false
                self.showsPlaceholderContent = false
                self.showsNetworkError = false
            }
            logger.debug("Help content loaded successfully for context: \(helpContext.rawValue)")
        } catch {
            await MainActor.run {
                self.showsErrorState = true
                self.showsPlaceholderContent = true
                self.showsNetworkError = true
            }
            logger.error("Failed to load help content: \(error.localizedDescription)")
        }
    }
    
    // MARK: - Interaction Recording
    
    private func recordInteraction(_ type: InteractionType) {
        let interaction = UserInteraction(type: type, context: helpContext)
        recordedInteractions.append(interaction)
        logger.debug("Interaction recorded: \(type.rawValue)")
    }
    
    // MARK: - State Reset
    
    func resetState() {
        isPresented = false
        currentStepIndex = 0
        isShowingExpandedHelp = false
        hasCompletedPresentationAnimation = false
        hasCompletedDismissalAnimation = false
        isCompleted = false
        completionTimestamp = nil
        totalStepCount = 1
        isUsingOfflineContent = false
        showsNetworkError = false
        showsPlaceholderContent = false
        showsErrorState = false
        helpContent = nil
        expandedHelpContent = nil
        currentHelpContent = nil
        recordedInteractions.removeAll()
        
        logger.debug("Interaction handler state reset")
    }
}