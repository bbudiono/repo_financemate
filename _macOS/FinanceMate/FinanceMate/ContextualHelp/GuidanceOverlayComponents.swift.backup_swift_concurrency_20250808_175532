//
// GuidanceOverlayComponents.swift
// FinanceMate
//
// Focused UI Components for Guidance Overlay View
// Created: 2025-08-08
// Target: FinanceMate
//

/*
 * Purpose: Focused UI components for guidance overlay view
 * Issues & Complexity Summary: Component-based architecture for overlay elements
 * Key Complexity Drivers:
   - Logic Scope (Est. LoC): ~120
   - Core Algorithm Complexity: Medium
   - Dependencies: SwiftUI, GuidanceOverlayInteractionHandler, GuidanceOverlayAccessibility
   - State Management Complexity: Medium (interaction state)
   - Novelty/Uncertainty Factor: Low (standard SwiftUI patterns)
 * AI Pre-Task Self-Assessment: 92%
 * Problem Estimate: 92%
 * Initial Code Complexity Estimate: 92%
 * Final Code Complexity: 92%
 * Overall Result Score: 92%
 * Key Variances/Learnings: Component isolation improves maintainability
 * Last Updated: 2025-08-08
 */

import SwiftUI

/// Header component for guidance overlay
struct GuidanceOverlayHeader: View {
    let interactionHandler: GuidanceOverlayInteractionHandler
    let accessibility: GuidanceOverlayAccessibility
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                if let title = interactionHandler.helpContent?.title {
                    Text(title)
                        .font(.headline)
                        .fontWeight(.semibold)
                        .accessibilityAddTraits(.isHeader)
                }
            }
            
            Spacer()
            
            Button(action: {
                Task {
                    await interactionHandler.dismissGuidance()
                }
            }) {
                Image(systemName: "xmark.circle.fill")
                    .font(.title2)
                    .foregroundColor(.secondary)
            }
            .accessibilityLabel(accessibility.closeButtonAccessibilityLabel)
            .accessibilityHint(accessibility.closeButtonAccessibilityHint)
        }
    }
}

/// Step indicator component for guidance overlay
struct GuidanceOverlayStepIndicator: View {
    let interactionHandler: GuidanceOverlayInteractionHandler
    let accessibility: GuidanceOverlayAccessibility
    
    var body: some View {
        HStack {
            Text(accessibility.stepIndicatorAccessibilityLabel(
                currentStep: interactionHandler.currentStepIndex,
                totalSteps: interactionHandler.totalStepCount
            ))
                .font(.caption)
                .foregroundColor(.secondary)
            
            Spacer()
            
            ProgressView(
                value: Double(interactionHandler.currentStepIndex + 1),
                total: Double(interactionHandler.totalStepCount)
            )
            .frame(width: 100)
            .accessibilityLabel(accessibility.progressAccessibilityLabel(
                currentStep: interactionHandler.currentStepIndex,
                totalSteps: interactionHandler.totalStepCount
            ))
        }
    }
}

/// Action buttons component for guidance overlay
struct GuidanceOverlayActionButtons: View {
    let interactionHandler: GuidanceOverlayInteractionHandler
    let accessibility: GuidanceOverlayAccessibility
    
    var body: some View {
        HStack(spacing: 12) {
            if interactionHandler.hasPreviousButton {
                Button(action: {
                    Task {
                        await interactionHandler.tapPreviousButton()
                    }
                }) {
                    HStack {
                        Image(systemName: "chevron.left")
                        Text("Previous")
                    }
                    .frame(maxWidth: .infinity)
                }
                .buttonStyle(.bordered)
                .accessibilityLabel(accessibility.previousButtonAccessibilityLabel)
                .accessibilityHint(accessibility.previousButtonAccessibilityHint)
            }
            
            Button(action: {
                Task {
                    await interactionHandler.tapNextButton()
                }
            }) {
                HStack {
                    Text(interactionHandler.nextButtonTitle)
                    if interactionHandler.hasNextButton {
                        Image(systemName: "chevron.right")
                    }
                }
                .frame(maxWidth: .infinity)
            }
            .buttonStyle(.borderedProminent)
            .accessibilityLabel(accessibility.nextButtonAccessibilityLabel)
            .accessibilityHint(accessibility.nextButtonAccessibilityHint)
        }
    }
}

/// Control buttons component for guidance overlay
struct GuidanceOverlayControlButtons: View {
    @Binding var isShowingExpandedHelp: Bool
    let interactionHandler: GuidanceOverlayInteractionHandler
    let accessibility: GuidanceOverlayAccessibility
    
    var body: some View {
        HStack {
            if interactionHandler.canShowExpandedHelp {
                Button(action: {
                    withAnimation(.easeInOut(duration: 0.3)) {
                        isShowingExpandedHelp.toggle()
                    }
                }) {
                    Text(isShowingExpandedHelp ? "Show Less" : "Show More")
                        .font(.footnote)
                }
                .accessibilityLabel(accessibility.expandButtonAccessibilityLabel(isExpanded: isShowingExpandedHelp))
                .accessibilityHint(accessibility.expandButtonAccessibilityHint(isExpanded: isShowingExpandedHelp))
            }
            
            Spacer()
            
            if interactionHandler.canDismissAutomatically {
                Button(action: {
                    Task {
                        await interactionHandler.pauseAutoProgress()
                    }
                }) {
                    Image(systemName: interactionHandler.isAutomaticallyProgressing ? "pause.circle" : "play.circle")
                        .font(.footnote)
                }
                .accessibilityLabel(accessibility.pauseButtonAccessibilityLabel(isPaused: !interactionHandler.isAutomaticallyProgressing))
                .accessibilityHint(accessibility.pauseButtonAccessibilityHint(isPaused: !interactionHandler.isAutomaticallyProgressing))
            }
        }
    }
}