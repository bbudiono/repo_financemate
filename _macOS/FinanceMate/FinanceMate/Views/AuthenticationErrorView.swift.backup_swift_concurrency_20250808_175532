import SwiftUI

/**
 * AuthenticationErrorView.swift
 * 
 * Purpose: Error displays, loading overlays, and authentication feedback UI
 * Issues & Complexity Summary: Error messaging and loading state display
 * Key Complexity Drivers:
 *   - Logic Scope (Est. LoC): ~80
 *   - Core Algorithm Complexity: Low (Display logic only)
 *   - Dependencies: 2 (SwiftUI, AuthenticationViewModel)
 *   - State Management Complexity: Low (Error state display)
 *   - Novelty/Uncertainty Factor: Low (Standard error patterns)
 * AI Pre-Task Self-Assessment: 95%
 * Problem Estimate: 90%
 * Initial Code Complexity Estimate: 25%
 * Final Code Complexity: 28%
 * Overall Result Score: 94%
 * Key Variances/Learnings: Extracted error handling maintains glassmorphism styling
 * Last Updated: 2025-08-06
 */

@MainActor
public struct AuthenticationErrorView: View {
    
    // MARK: - Properties
    
    @ObservedObject var authViewModel: AuthenticationViewModel
    
    public init(authViewModel: AuthenticationViewModel) {
        self.authViewModel = authViewModel
    }
    
    public var body: some View {
        Group {
            // Loading overlay
            if authViewModel.isLoading {
                loadingOverlay
            }
        }
    }
    
    // MARK: - Loading Overlay
    
    private var loadingOverlay: some View {
        ZStack {
            Color.black.opacity(0.3)
                .ignoresSafeArea()
            
            VStack(spacing: 16) {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                    .scaleEffect(1.5)
                
                Text("Authenticating...")
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(.white)
            }
            .padding(32)
            .background(Color.black.opacity(0.8))
            .clipShape(RoundedRectangle(cornerRadius: 16))
        }
    }
}

// MARK: - Supporting Views

public struct AuthenticationErrorAlert: ViewModifier {
    
    @ObservedObject var authViewModel: AuthenticationViewModel
    
    public func body(content: Content) -> some View {
        content
            .alert("Authentication Error", isPresented: .constant(authViewModel.errorMessage != nil)) {
                Button("OK") {
                    authViewModel.errorMessage = nil
                }
            } message: {
                Text(authViewModel.errorMessage ?? "")
            }
    }
}

public extension View {
    func authenticationErrorAlert(authViewModel: AuthenticationViewModel) -> some View {
        self.modifier(AuthenticationErrorAlert(authViewModel: authViewModel))
    }
}

// MARK: - Preview

struct AuthenticationErrorView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            // Loading state preview
            AuthenticationErrorView(
                authViewModel: {
                    let vm = AuthenticationViewModel(
                        context: PersistenceController.preview.container.viewContext
                    )
                    vm.isLoading = true
                    return vm
                }()
            )
            .previewDisplayName("Loading State")
            
            // Normal state preview
            AuthenticationErrorView(
                authViewModel: AuthenticationViewModel(
                    context: PersistenceController.preview.container.viewContext
                )
            )
            .previewDisplayName("Normal State")
        }
        .frame(width: 400, height: 300)
        .background(Color(.windowBackgroundColor))
    }
}