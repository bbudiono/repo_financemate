# Task ID: 76
# Title: Implement Google SSO: Sign-In Flow (Sandbox UI)
# Status: pending
# Dependencies: 75
# Priority: high
# Description: Add Google Sign-In button to SignInView, implement the UI interaction, and handle the Google Sign-In flow using AuthenticationService and GoogleAuthProvider. Update AuthViewModel to manage Google Sign-In state.
# Details:
1. Add GIDSignInButton to SignInView.swift. 2. Connect button action to AuthViewModel. 3. AuthViewModel to call AuthenticationService/GoogleAuthProvider to initiate sign-in. 4. Handle success/failure callbacks from Google Sign-In. 5. Update user state upon successful sign-in. 6. Write unit/UI tests for the sign-in flow. 7. Ensure Sandbox build remains GREEN. Follow TDD and .cursorrules ยง8.2.

# Test Strategy:
Unit tests for AuthViewModel logic. UI tests for SignInView button interaction and navigation. Manual test of sign-in flow. Sandbox build must succeed.

# Subtasks:
## 1. Integrate Google Sign-In SDK and Configure Project [pending]
### Dependencies: None
### Description: Add the Google Sign-In SDK to the project using Swift Package Manager, configure the OAuth client ID, and set up the required URL schemes in the Xcode project settings.
### Details:
Follow the official documentation to add the GoogleSignInSwift package. Obtain the OAuth client ID from the Google Developer Console and add it to the project. Update the Info.plist with the necessary URL schemes for Google authentication callbacks.

## 2. Add Google Sign-In Button to SignInView [pending]
### Dependencies: 76.1
### Description: Add the GoogleSignInButton to the SignInView SwiftUI file and ensure it matches the app's design requirements.
### Details:
Import GoogleSignInSwift and place the GoogleSignInButton in the SignInView. Customize the button's appearance if needed using a custom view model or modifiers. Ensure the button's action triggers a handler method.

## 3. Connect Button Action to AuthViewModel [pending]
### Dependencies: 76.2
### Description: Wire the GoogleSignInButton's action to a method in AuthViewModel that initiates the Google Sign-In process.
### Details:
Define a signInWithGoogle() method in AuthViewModel. In the SignInView, call this method from the button's action. Ensure the method uses GIDSignIn to start the sign-in flow, passing the correct presenting view controller.

## 4. Handle Google Sign-In Result and Update Auth State [pending]
### Dependencies: 76.3
### Description: Process the result of the Google Sign-In flow in AuthViewModel, handle success and failure, and update the authentication state accordingly.
### Details:
In the signInWithGoogle() method, handle the completion callback from GIDSignIn. On success, extract the user's credentials and use GoogleAuthProvider to authenticate with the backend (e.g., Firebase). Update published properties in AuthViewModel to reflect the user's sign-in state and handle errors gracefully.

## 5. Implement Unit and UI Tests for Google Sign-In Flow [pending]
### Dependencies: 76.4
### Description: Write comprehensive unit and UI tests to cover the Google Sign-In flow, including button interaction, state changes, and error handling.
### Details:
Use XCTest and SwiftUI testing tools to simulate user interaction with the GoogleSignInButton, mock authentication responses, and assert correct state transitions in AuthViewModel. Ensure tests cover edge cases and maintain a green build in the sandbox environment.

