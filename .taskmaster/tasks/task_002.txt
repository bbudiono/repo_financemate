# Task ID: 2
# Title: Define Core Data Models
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Design and implement CoreData models for Case, Client, Calendar/Event, Document, and Time Entry entities as specified in the PRD.
# Details:
Create CoreData entities with attributes and relationships: Case (name, number, type, status, dates, related clients, documents), Client (contact info, cases, communications, billing), Calendar/Event (type, reminders, recurrence, case/client links), Document (metadata, versions, templates, file refs), Time Entry (duration, timestamps, billable, case/task links). Use protocol-oriented design for model interfaces.

# Test Strategy:
Unit tests for model creation, attribute validation, and relationship integrity. Test CRUD operations on each model.

# Subtasks:
## 1. Create Core Data Stack [pending]
### Dependencies: None
### Description: Implement a robust Core Data stack with proper concurrency support to handle background operations for all entity models
### Details:
Set up a Core Data stack that includes NSPersistentContainer, NSManagedObjectContext configurations for main and background contexts, and proper error handling. Ensure all heavy data operations run on background contexts to keep the UI responsive. Implement a singleton pattern for accessing the stack throughout the app.

## 2. Define Entity Models and Attributes [pending]
### Dependencies: 2.1
### Description: Create the Core Data entities (Case, Client, Calendar/Event, Document, Time Entry) with all required attributes in the data model file
### Details:
Using the Core Data Model editor, define each entity with appropriate attributes: Case (name, number, type, status, dates), Client (contact info, billing details), Calendar/Event (type, reminders, recurrence), Document (metadata, versions, template flags, file references), and Time Entry (duration, timestamps, billable flag). Set proper data types and validation rules for each attribute.

## 3. Implement Entity Relationships [pending]
### Dependencies: 2.2
### Description: Define bidirectional relationships between all entities to ensure proper object graph management
### Details:
Establish relationships: Case-to-Client (many-to-many), Case-to-Document (one-to-many), Case-to-TimeEntry (one-to-many), Case-to-Event (one-to-many), Client-to-Event (one-to-many), etc. Configure appropriate delete rules (cascade, nullify) for each relationship. Ensure all relationships are bidirectional to allow Core Data to properly manage the object graph. Consider denormalizing certain attributes for performance optimization where appropriate.

## 4. Create Protocol-Oriented Model Interfaces [pending]
### Dependencies: 2.3
### Description: Design and implement protocols that define the interface for interacting with each entity model
### Details:
Create protocols for each entity type (CaseProtocol, ClientProtocol, etc.) that define the required properties and methods. Implement extensions on the NSManagedObject subclasses to conform to these protocols. This approach decouples the Core Data implementation from the rest of the app and facilitates testing. Include computed properties for derived values and helper methods for common operations.

## 5. Implement CRUD Operations and Fetching [pending]
### Dependencies: 2.4
### Description: Create service classes to handle Create, Read, Update, Delete operations and fetching for all entity models
### Details:
Develop service classes for each entity type that handle persistence operations. Implement methods for creating, updating, and deleting entities with proper error handling. Create specialized fetch requests with predicates and sort descriptors for common query patterns. Ensure all operations follow concurrency best practices by performing work on background contexts and synchronizing with the main context when needed.

