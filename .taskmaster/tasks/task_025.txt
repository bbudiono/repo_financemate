# Task ID: 25
# Title: Implement Google SSO in FinanceMate-Sandbox macOS App with TDD and Modular Architecture
# Status: pending
# Dependencies: None
# Priority: high
# Description: Integrate Google Sign-In (SSO) into the FinanceMate-Sandbox macOS app using a modular, reusable architecture and professional UI/UX, ensuring seamless integration with the existing authentication flow and profile view. All code must be developed with TDD, maintain >90% quality, comply with .cursorrules, and use .env values for credentials, referencing provided example code. The implementation must follow a clear subtask breakdown: SDK setup and configuration, a modular GoogleAuthProvider service, professional UI integration, secure URL/callback handling, and comprehensive TDD validation.
# Details:
1. SDK Setup & Configuration: Ensure all required OAuth keys are present in .env and Info.plist, update entitlements and URL schemes, and document configuration. Follow Google documentation and provided example code for correct setup[1][2][5].
2. GoogleAuthProvider Service: Implement a modular, testable GoogleAuthProvider class in the sandbox, modeled after the example code, with full error handling and security best practices. Use dependency injection for configuration and credential management, sourcing client IDs and secrets from .env files[2][5].
3. UI Integration: Add a professional, accessible 'Sign in with Google' button to SignInView using GoogleSignInSwift, and update ProfileView to display Google user info and provider. Ensure the UI integrates smoothly with the existing authentication flow and profile view, handling all edge cases (e.g., errors, cancellations, token refresh)[2].
4. URL Handling & Callback: Implement secure OAuth callback handling, including error/cancellation flows, and ensure correct state management in the ViewModel. Register URL handlers and event listeners as required for Google SSO on macOS, ensuring correct handling of authentication callbacks and deep links[2][4].
5. TDD & Validation: Expand AuthViewModelTests to cover Google SSO (success, error, cancellation, invalid credentials, network, accessibility), and ensure all code is >90% quality and .cursorrules compliant. Write comprehensive unit and integration tests using TDD, covering all authentication logic, error handling, and UI states. Collaborate with the team to review architecture and UI/UX for consistency and maintainability.

# Test Strategy:
- Write unit tests for all GoogleAuthProvider methods, including successful sign-in, error handling, and token management, ensuring >90% code coverage.
- Implement UI tests for the Google Sign-In flow, verifying correct UI presentation, error messages, and integration with the profile view.
- Validate that credentials are loaded securely from .env and not hardcoded, and that Info.plist and entitlements are correctly configured.
- Use .cursorrules automated tools to verify code quality, modularity, and documentation compliance.
- Manually test the end-to-end sign-in experience, including edge cases (e.g., network errors, user cancellation), and confirm seamless integration with the existing authentication and profile flows.
- Review the implementation against the provided example code and ensure all acceptance criteria are met.

# Subtasks:
## 1. Configure Google Sign-In SDK and Environment Setup [pending]
### Dependencies: None
### Description: Set up the Google Sign-In SDK in the FinanceMate-Sandbox macOS app, configure OAuth credentials, and prepare the project environment for SSO integration.
### Details:
1. Add GoogleSignIn and GoogleSignInSwift packages to the project using Swift Package Manager with the latest stable version.
2. Configure Info.plist with the Reversed Client ID in URL schemes section.
3. Set up .env file with Google OAuth client ID and secret.
4. Update app entitlements for keychain access.
5. Configure AppDelegate to handle authentication callbacks.

## 2. Implement GoogleAuthProvider Service Class [pending]
### Dependencies: 25.1
### Description: Create a modular, testable GoogleAuthProvider service that handles authentication logic, token management, and integration with the app's authentication system.
### Details:
1. Create a GoogleAuthProvider class implementing a common auth provider protocol.
2. Implement sign-in, sign-out, and token refresh methods.
3. Add comprehensive error handling for network issues, user cancellations, and invalid credentials.
4. Use dependency injection for configuration parameters and credential management.
5. Implement secure storage for tokens and user information.
6. Add methods to retrieve user profile information from Google.

## 3. Integrate Google Sign-In UI Components [pending]
### Dependencies: 25.2
### Description: Add Google Sign-In button to the authentication flow and update the profile view to display Google user information.
### Details:
1. Add a 'Sign in with Google' button to SignInView using GoogleSignInSwift components.
2. Style the button to match the app's design language while maintaining Google's branding requirements.
3. Implement loading states and error feedback in the UI.
4. Update ProfileView to display Google user information when signed in via Google.
5. Ensure accessibility compliance for all new UI elements.
6. Handle UI state transitions during the authentication process.

## 4. Implement OAuth Callback Handling and State Management [pending]
### Dependencies: 25.1, 25.2
### Description: Set up secure URL handling for OAuth callbacks and implement proper state management in the authentication flow.
### Details:
1. Register URL handlers in AppDelegate to process authentication callbacks.
2. Implement NSAppleEventManager handler for kAEGetURL events in macOS.
3. Create a secure state verification system to prevent CSRF attacks.
4. Implement proper error handling for callback failures.
5. Update AuthViewModel to manage authentication state during the Google sign-in process.
6. Handle edge cases like cancelled authentication and expired tokens.

## 5. Implement Comprehensive Testing and Validation [pending]
### Dependencies: 25.2, 25.3, 25.4
### Description: Expand test coverage to include all aspects of Google SSO integration, ensuring code quality and compliance with project standards.
### Details:
1. Expand AuthViewModelTests to cover Google SSO flows.
2. Create integration tests that verify the end-to-end authentication process.
3. Implement tests for error scenarios including network failures, invalid credentials, and user cancellations.
4. Add accessibility tests for all UI components.
5. Verify compliance with .cursorrules and ensure >90% code quality metrics.
6. Document all test cases and their coverage in the codebase.

