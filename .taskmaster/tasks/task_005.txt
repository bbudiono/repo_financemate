# Task ID: 5
# Title: Basic Client Information Management
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Implement UI and logic for managing client profiles and contact information.
# Details:
Create SwiftUI forms for client profiles (name, contact info, case relationships). Connect to CoreData. Support basic CRUD operations.

# Test Strategy:
Test client profile creation, editing, and deletion. Verify relationship with cases.

# Subtasks:
## 1. Create Client Profile Form UI [pending]
### Dependencies: None
### Description: Implement the SwiftUI form interface for client profile information including text fields for name, contact details, and case relationships
### Details:
Create a new SwiftUI View with Form and Section components. Implement TextField components for first name, last name, email, and phone number. Add a Toggle for active/inactive status. Use @State variables to manage form data. Ensure proper layout and styling consistent with app design.

## 2. Design CoreData Model for Client Profiles [pending]
### Dependencies: None
### Description: Create the CoreData model entities and relationships needed to store client profile information
### Details:
Define a Client entity with attributes for firstName, lastName, email, phone, and status. Create relationships to Case entities. Set up appropriate data types, validation rules, and default values. Generate NSManagedObject subclasses for type-safe access.

## 3. Implement Client Profile CRUD Operations [pending]
### Dependencies: 5.2
### Description: Create service layer to handle Create, Read, Update, and Delete operations for client profiles using CoreData
### Details:
Develop a ClientProfileService class with methods for saving new clients, fetching clients (individual and lists), updating client information, and deleting clients. Implement proper error handling and CoreData context management. Use async/await for asynchronous operations.

## 4. Connect Form UI to CoreData [pending]
### Dependencies: 5.1, 5.3
### Description: Integrate the SwiftUI form with CoreData operations to enable saving and loading client information
### Details:
Create a view model to bridge between UI and data layer. Implement methods to populate form fields from CoreData entities and save form data back to CoreData. Add validation logic before saving. Use @ObservedObject or @StateObject for the view model in the form view.

## 5. Implement Client List View with Navigation [pending]
### Dependencies: 5.3, 5.4
### Description: Create a list view of all clients with navigation to individual client profile forms for viewing and editing
### Details:
Build a SwiftUI List view that displays client names and basic info. Implement search and filtering capabilities. Create navigation links to the client profile form. Add swipe actions for quick delete and status toggle. Use FetchRequest or a view model to retrieve client data.

