# Task ID: 7
# Title: Basic Document Storage Functionality
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Implement basic document storage and management within the app.
# Details:
Allow users to upload, view, and delete documents associated with cases. Store document metadata in CoreData. Use macOS file system for actual file storage. Support basic file operations.

# Test Strategy:
Test document upload, retrieval, and deletion. Verify metadata and file system integration.

# Subtasks:
## 1. Implement Document Upload Functionality [pending]
### Dependencies: None
### Description: Create the UI and backend logic to allow users to upload documents from their device to the app and associate them with specific cases.
### Details:
Develop a file picker interface that allows users to select documents from their local system. Implement file validation to ensure only supported document types are uploaded. Create a service to copy the selected file to the app's designated storage directory in the macOS file system. Generate a unique identifier for each document and store metadata (filename, size, upload date, associated case ID) in CoreData.

## 2. Create Document Viewing Interface [pending]
### Dependencies: 7.1
### Description: Develop a document viewer component that allows users to preview and read documents within the app without downloading them.
### Details:
Implement a document preview component that supports common file formats (PDF, DOC, images). Create a service to retrieve files from the storage location based on metadata stored in CoreData. Design a clean interface for document viewing with appropriate controls (zoom, page navigation for multi-page documents). Include a loading state for when documents are being fetched.

## 3. Implement Document Deletion and Management [pending]
### Dependencies: 7.1
### Description: Create functionality to allow users to delete documents and manage basic document properties.
### Details:
Implement a confirmation dialog before document deletion. Create a service to remove files from the file system and delete corresponding metadata from CoreData. Ensure proper error handling for cases where the file might be missing or locked. Add functionality to update document metadata such as name or description. Implement proper cleanup to avoid orphaned files in the file system.

## 4. Develop Document Listing and Search [pending]
### Dependencies: 7.1, 7.2
### Description: Create a document list view that displays all documents associated with a case and implement basic search functionality.
### Details:
Design and implement a list view showing document thumbnails/icons, names, and key metadata. Create CoreData queries to fetch documents filtered by case ID. Implement sorting options (by name, date, size, etc.). Add a search field that filters documents based on filename and metadata. Include appropriate empty states and loading indicators.

## 5. Implement Document Version Control [pending]
### Dependencies: 7.1, 7.3
### Description: Add basic version control functionality to track changes when documents are updated.
### Details:
Modify the document storage system to maintain previous versions when a document is updated rather than overwriting. Update the CoreData schema to track version history with timestamps and version numbers. Create a UI component to view version history and restore previous versions. Implement a service to retrieve specific versions of a document. Consider storage optimization by limiting the number of versions kept.

