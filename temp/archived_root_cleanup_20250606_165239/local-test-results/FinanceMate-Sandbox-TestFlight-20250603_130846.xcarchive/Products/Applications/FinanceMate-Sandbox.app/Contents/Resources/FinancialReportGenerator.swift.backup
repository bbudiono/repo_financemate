//
//  FinancialReportGenerator.swift
//  FinanceMate-Sandbox
//
//  Created by Assistant on 6/2/25.
//

// SANDBOX FILE: For testing/development. See .cursorrules.

/*
* Purpose: Financial report generator for analytics and insights in Sandbox environment
* Issues & Complexity Summary: Initial TDD implementation - will fail tests to drive development
* Key Complexity Drivers:
  - Logic Scope (Est. LoC): ~600
  - Core Algorithm Complexity: High
  - Dependencies: 5 New (report generation, data analysis, export formats, chart generation, persistence)
  - State Management Complexity: High
  - Novelty/Uncertainty Factor: Medium
* AI Pre-Task Self-Assessment (Est. Solution Difficulty %): 75%
* Problem Estimate (Inherent Problem Difficulty %): 70%
* Initial Code Complexity Estimate %: 72%
* Justification for Estimates: Financial analytics and report generation with multiple export formats
* Final Code Complexity (Actual %): TBD - Initial implementation
* Overall Result Score (Success & Quality %): TBD - TDD iteration
* Key Variances/Learnings: TDD approach ensures robust financial analytics and reporting capabilities
* Last Updated: 2025-06-02
*/

import Foundation
import SwiftUI
import Combine

// MARK: - Financial Report Generator Service

@MainActor
public class FinancialReportGenerator: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published public var isGenerating: Bool = false
    @Published public var generatedReports: [FinancialReport] = []
    @Published public var configuration: ReportConfiguration = ReportConfiguration()
    
    // MARK: - Private Properties
    
    private let reportQueue = DispatchQueue(label: "com.financemate.reports", qos: .userInitiated)
    private var reportStorage: [UUID: FinancialReport] = [:]
    
    // MARK: - Initialization
    
    public init() {
        // Initialize with default configuration
    }
    
    // MARK: - Report Generation Methods
    
    public func generateExpenseReport(from data: [FinancialData], period: ReportPeriod) async -> FinancialReport {
        isGenerating = true
        
        defer {
            Task { @MainActor in
                isGenerating = false
            }
        }
        
        let reportId = UUID()
        let startTime = Date()
        
        // Filter expenses (negative amounts or expense categories)
        let expenses = data.filter { getTotalAmountDouble(from: $0) > 0 && !isIncomeCategory($0.category.rawValue) }
        
        // Calculate totals and analytics
        let totalAmount = expenses.reduce(0) { $0 + $1.amount }
        let categoryBreakdown = calculateCategoryBreakdown(from: expenses)
        let items = createReportItems(from: expenses)
        
        let report = FinancialReport(
            reportId: reportId,
            reportType: .expenses,
            period: period,
            generatedAt: Date(),
            totalAmount: totalAmount,
            items: items,
            categoryBreakdown: categoryBreakdown,
            trends: [],
            deductions: [],
            analytics: createBasicAnalytics(from: expenses),
            exportedFormats: []
        )
        
        // Store and add to generated reports
        reportStorage[reportId] = report
        generatedReports.append(report)
        
        return report
    }
    
    public func generateIncomeReport(from data: [FinancialData], period: ReportPeriod) async -> FinancialReport {
        isGenerating = true
        
        defer {
            Task { @MainActor in
                isGenerating = false
            }
        }
        
        let reportId = UUID()
        
        // Filter income data
        let income = data.filter { isIncomeCategory($0.category) || $0.amount < 0 }
        
        let totalAmount = income.reduce(0) { $0 + abs($1.amount) }
        let categoryBreakdown = calculateCategoryBreakdown(from: income)
        let items = createReportItems(from: income)
        
        let report = FinancialReport(
            reportId: reportId,
            reportType: .income,
            period: period,
            generatedAt: Date(),
            totalAmount: totalAmount,
            items: items,
            categoryBreakdown: categoryBreakdown,
            trends: [],
            deductions: [],
            analytics: createBasicAnalytics(from: income),
            exportedFormats: []
        )
        
        reportStorage[reportId] = report
        generatedReports.append(report)
        
        return report
    }
    
    public func generateTaxReport(from data: [FinancialData], taxYear: Int) async -> FinancialReport {
        isGenerating = true
        
        defer {
            Task { @MainActor in
                isGenerating = false
            }
        }
        
        let reportId = UUID()
        
        // Filter tax-deductible expenses
        let taxDeductible = data.filter { isTaxDeductibleCategory($0.category) }
        
        let totalAmount = taxDeductible.reduce(0) { $0 + $1.amount }
        let categoryBreakdown = calculateCategoryBreakdown(from: taxDeductible)
        let items = createReportItems(from: taxDeductible)
        let deductions = createTaxDeductions(from: taxDeductible)
        
        let report = FinancialReport(
            reportId: reportId,
            reportType: .tax,
            period: .yearly,
            generatedAt: Date(),
            totalAmount: totalAmount,
            items: items,
            categoryBreakdown: categoryBreakdown,
            trends: [],
            deductions: deductions,
            analytics: createTaxAnalytics(from: taxDeductible),
            exportedFormats: []
        )
        
        reportStorage[reportId] = report
        generatedReports.append(report)
        
        return report
    }
    
    // MARK: - Analytics Methods
    
    public func calculateMonthlyTrends(from data: [FinancialData]) async -> [MonthlyTrend] {
        let calendar = Calendar.current
        var monthlyData: [String: Double] = [:]
        
        // Group data by month
        for item in data {
            let monthKey = DateFormatter.monthYear.string(from: item.date)
            monthlyData[monthKey, default: 0] += item.amount
        }
        
        // Calculate trends
        let sortedMonths = monthlyData.keys.sorted()
        var trends: [MonthlyTrend] = []
        
        for (index, month) in sortedMonths.enumerated() {
            let amount = monthlyData[month] ?? 0
            let previousAmount = index > 0 ? monthlyData[sortedMonths[index - 1]] ?? 0 : amount
            let growthRate = previousAmount > 0 ? ((amount - previousAmount) / previousAmount) * 100 : 0
            
            trends.append(MonthlyTrend(
                month: month,
                amount: amount,
                growthRate: growthRate,
                transactionCount: data.filter { DateFormatter.monthYear.string(from: $0.date) == month }.count
            ))
        }
        
        return trends
    }
    
    public func analyzeCategoryBreakdown(from data: [FinancialData]) async -> CategoryAnalysis {
        let breakdown = calculateCategoryBreakdown(from: data)
        let totalCategorized = breakdown.values.reduce(0, +)
        
        return CategoryAnalysis(
            categories: breakdown,
            totalCategorized: totalCategorized,
            uncategorized: data.filter { $0.category.isEmpty }.reduce(0) { $0 + $1.amount }
        )
    }
    
    public func analyzeCashFlow(from data: [FinancialData], period: ReportPeriod) async -> CashFlowAnalysis {
        let inflows = data.filter { isIncomeCategory($0.category) || $0.amount < 0 }
        let outflows = data.filter { !isIncomeCategory($0.category) && $0.amount > 0 }
        
        let totalInflows = inflows.reduce(0) { $0 + abs($1.amount) }
        let totalOutflows = outflows.reduce(0) { $0 + $1.amount }
        let netCashFlow = totalInflows - totalOutflows
        
        return CashFlowAnalysis(
            period: period,
            inflows: createCashFlowItems(from: inflows),
            outflows: createCashFlowItems(from: outflows),
            netCashFlow: netCashFlow,
            totalInflows: totalInflows,
            totalOutflows: totalOutflows
        )
    }
    
    // MARK: - Export Methods
    
    public func exportToPDF(report: FinancialReport) async -> Data {
        // Simulate PDF generation
        let pdfContent = generatePDFContent(from: report)
        return pdfContent.data(using: .utf8) ?? Data()
    }
    
    public func exportToCSV(report: FinancialReport) async -> String {
        var csvContent = "Date,Vendor,Category,Amount,Currency\\n"
        
        for item in report.items {
            let dateString = DateFormatter.standard.string(from: item.date)
            csvContent += "\\"\(dateString)\\",\\"\(item.vendor)\\",\\"\(item.category)\\",\(item.amount),\\"\(item.currency)\\"\\n"
        }
        
        return csvContent
    }
    
    // MARK: - Report Management Methods
    
    public func saveReport(_ report: FinancialReport) async -> UUID {
        reportStorage[report.reportId] = report
        if !generatedReports.contains(where: { $0.reportId == report.reportId }) {
            generatedReports.append(report)
        }
        return report.reportId
    }
    
    public func getReport(by id: UUID) async -> FinancialReport? {
        return reportStorage[id]
    }
    
    public func getGeneratedReports() -> [FinancialReport] {
        return generatedReports
    }
    
    public func deleteReport(by id: UUID) {
        reportStorage.removeValue(forKey: id)
        generatedReports.removeAll { $0.reportId == id }
    }
    
    // MARK: - Configuration Methods
    
    public func configureSettings(currency: String, dateFormat: String, includeCharts: Bool) {
        configuration.currency = currency
        configuration.dateFormat = dateFormat
        configuration.includeCharts = includeCharts
    }
    
    // MARK: - Private Helper Methods
    
    private func getTotalAmountDouble(from data: FinancialData) -> Double {
        guard let totalAmountStr = data.totalAmount else { return 0.0 }
        return Double(totalAmountStr.replacingOccurrences(of: "[^0-9.]", with: "", options: .regularExpression)) ?? 0.0
    }
    
    private func getDateFromString(_ dateString: String?) -> Date {
        guard let dateStr = dateString else { return Date() }
        return DateFormatter.standard.date(from: dateStr) ?? Date()
    }
    
    private func isIncomeCategory(_ category: String) -> Bool {
        let incomeCategories = ["Income", "Revenue", "Sales", "Payment Received", "Consulting"]
        return incomeCategories.contains { category.localizedCaseInsensitiveContains($0) }
    }
    
    private func isTaxDeductibleCategory(_ category: String) -> Bool {
        let deductibleCategories = ["Office Expenses", "Software", "Travel", "Meals & Entertainment", "Education"]
        return deductibleCategories.contains { category.localizedCaseInsensitiveContains($0) }
    }
    
    private func calculateCategoryBreakdown(from data: [FinancialData]) -> [String: Double] {
        var breakdown: [String: Double] = [:]
        
        for item in data {
            let category = item.category.isEmpty ? "Uncategorized" : item.category
            breakdown[category, default: 0] += item.amount
        }
        
        return breakdown
    }
    
    private func createReportItems(from data: [FinancialData]) -> [ReportItem] {
        return data.map { financialData in
            ReportItem(
                id: UUID(),
                date: financialData.date,
                vendor: financialData.vendor ?? "Unknown",
                category: financialData.category,
                amount: financialData.amount,
                currency: financialData.currency,
                description: "\\(financialData.documentType.rawValue) - \\(financialData.vendor ?? "Unknown")"
            )
        }
    }
    
    private func createBasicAnalytics(from data: [FinancialData]) -> ReportAnalytics {
        let averageAmount = data.isEmpty ? 0 : data.reduce(0) { $0 + $1.amount } / Double(data.count)
        let highestTransaction = data.max(by: { $0.amount < $1.amount })?.amount ?? 0
        let lowestTransaction = data.min(by: { $0.amount < $1.amount })?.amount ?? 0
        
        return ReportAnalytics(
            averageTransactionAmount: averageAmount,
            highestTransaction: highestTransaction,
            lowestTransaction: lowestTransaction,
            transactionCount: data.count,
            averageConfidence: data.isEmpty ? 0 : data.reduce(0) { $0 + $1.confidence } / Double(data.count)
        )
    }
    
    private func createTaxAnalytics(from data: [FinancialData]) -> ReportAnalytics {
        var analytics = createBasicAnalytics(from: data)
        analytics.taxDeductibleAmount = data.reduce(0) { $0 + $1.amount }
        return analytics
    }
    
    private func createTaxDeductions(from data: [FinancialData]) -> [TaxDeduction] {
        let categoryTotals = calculateCategoryBreakdown(from: data)
        
        return categoryTotals.map { category, amount in
            TaxDeduction(
                category: category,
                amount: amount,
                description: "Tax deductible expenses for \\(category)",
                eligiblePercentage: getTaxDeductionPercentage(for: category)
            )
        }
    }
    
    private func getTaxDeductionPercentage(for category: String) -> Double {
        switch category.lowercased() {
        case let c where c.contains("meals"):
            return 0.5 // 50% deductible
        case let c where c.contains("office"), let c where c.contains("software"):
            return 1.0 // 100% deductible
        default:
            return 1.0 // Default 100% deductible
        }
    }
    
    private func createCashFlowItems(from data: [FinancialData]) -> [CashFlowItem] {
        return data.map { financialData in
            CashFlowItem(
                date: financialData.date,
                amount: abs(financialData.amount),
                category: financialData.category,
                vendor: financialData.vendor ?? "Unknown"
            )
        }
    }
    
    private func generatePDFContent(from report: FinancialReport) -> String {
        var content = "FINANCIAL REPORT\\n"
        content += "==================\\n\\n"
        content += "Report Type: \\(report.reportType.rawValue.capitalized)\\n"
        content += "Period: \\(report.period.rawValue.capitalized)\\n"
        content += "Generated: \\(DateFormatter.standard.string(from: report.generatedAt))\\n"
        let formattedTotal = String(format: "%.2f", report.totalAmount)
        content += "Total Amount: \\(configuration.currency)\\(formattedTotal)\\n\\n"
        
        content += "ITEMS:\\n"
        content += "------\\n"
        for item in report.items {
            let formattedAmount = String(format: "%.2f", item.amount)
            content += "\\(DateFormatter.standard.string(from: item.date)) - \\(item.vendor) - \\(configuration.currency)\\(formattedAmount)\\n"
        }
        
        return content
    }
}

// MARK: - Supporting Data Models

public struct FinancialReport {
    public let reportId: UUID
    public let reportType: ReportType
    public let period: ReportPeriod
    public let generatedAt: Date
    public let totalAmount: Double
    public let items: [ReportItem]
    public let categoryBreakdown: [String: Double]
    public let trends: [MonthlyTrend]
    public let deductions: [TaxDeduction]
    public let analytics: ReportAnalytics
    public var exportedFormats: [ExportFormat]
    
    public init(reportId: UUID, reportType: ReportType, period: ReportPeriod, generatedAt: Date, totalAmount: Double, items: [ReportItem], categoryBreakdown: [String: Double], trends: [MonthlyTrend], deductions: [TaxDeduction], analytics: ReportAnalytics, exportedFormats: [ExportFormat]) {
        self.reportId = reportId
        self.reportType = reportType
        self.period = period
        self.generatedAt = generatedAt
        self.totalAmount = totalAmount
        self.items = items
        self.categoryBreakdown = categoryBreakdown
        self.trends = trends
        self.deductions = deductions
        self.analytics = analytics
        self.exportedFormats = exportedFormats
    }
}

public struct ReportItem {
    public let id: UUID
    public let date: Date
    public let vendor: String
    public let category: String
    public let amount: Double
    public let currency: String
    public let description: String
    
    public init(id: UUID, date: Date, vendor: String, category: String, amount: Double, currency: String, description: String) {
        self.id = id
        self.date = date
        self.vendor = vendor
        self.category = category
        self.amount = amount
        self.currency = currency
        self.description = description
    }
}

public struct MonthlyTrend {
    public let month: String
    public let amount: Double
    public let growthRate: Double
    public let transactionCount: Int
    
    public init(month: String, amount: Double, growthRate: Double, transactionCount: Int) {
        self.month = month
        self.amount = amount
        self.growthRate = growthRate
        self.transactionCount = transactionCount
    }
}

public struct CategoryAnalysis {
    public let categories: [String: Double]
    public let totalCategorized: Double
    public let uncategorized: Double
    
    public init(categories: [String: Double], totalCategorized: Double, uncategorized: Double) {
        self.categories = categories
        self.totalCategorized = totalCategorized
        self.uncategorized = uncategorized
    }
}

public struct CashFlowAnalysis {
    public let period: ReportPeriod
    public let inflows: [CashFlowItem]
    public let outflows: [CashFlowItem]
    public let netCashFlow: Double
    public let totalInflows: Double
    public let totalOutflows: Double
    
    public init(period: ReportPeriod, inflows: [CashFlowItem], outflows: [CashFlowItem], netCashFlow: Double, totalInflows: Double, totalOutflows: Double) {
        self.period = period
        self.inflows = inflows
        self.outflows = outflows
        self.netCashFlow = netCashFlow
        self.totalInflows = totalInflows
        self.totalOutflows = totalOutflows
    }
}

public struct CashFlowItem {
    public let date: Date
    public let amount: Double
    public let category: String
    public let vendor: String
    
    public init(date: Date, amount: Double, category: String, vendor: String) {
        self.date = date
        self.amount = amount
        self.category = category
        self.vendor = vendor
    }
}

public struct TaxDeduction {
    public let category: String
    public let amount: Double
    public let description: String
    public let eligiblePercentage: Double
    
    public var deductibleAmount: Double {
        return amount * eligiblePercentage
    }
    
    public init(category: String, amount: Double, description: String, eligiblePercentage: Double) {
        self.category = category
        self.amount = amount
        self.description = description
        self.eligiblePercentage = eligiblePercentage
    }
}

public struct ReportAnalytics {
    public let averageTransactionAmount: Double
    public let highestTransaction: Double
    public let lowestTransaction: Double
    public let transactionCount: Int
    public let averageConfidence: Double
    public var taxDeductibleAmount: Double?
    
    public init(averageTransactionAmount: Double, highestTransaction: Double, lowestTransaction: Double, transactionCount: Int, averageConfidence: Double, taxDeductibleAmount: Double? = nil) {
        self.averageTransactionAmount = averageTransactionAmount
        self.highestTransaction = highestTransaction
        self.lowestTransaction = lowestTransaction
        self.transactionCount = transactionCount
        self.averageConfidence = averageConfidence
        self.taxDeductibleAmount = taxDeductibleAmount
    }
}

public struct ReportConfiguration {
    public var currency: String = "USD"
    public var dateFormat: String = "yyyy-MM-dd"
    public var includeCharts: Bool = true
    public var maxItemsPerReport: Int = 1000
    
    public init() {}
}

public enum ReportType: String, CaseIterable {
    case expenses = "expenses"
    case income = "income"
    case tax = "tax"
    case cashFlow = "cash_flow"
    case summary = "summary"
    
    public var displayName: String {
        switch self {
        case .expenses: return "Expenses"
        case .income: return "Income"
        case .tax: return "Tax"
        case .cashFlow: return "Cash Flow"
        case .summary: return "Summary"
        }
    }
}

public enum ReportPeriod: String, CaseIterable {
    case daily = "daily"
    case weekly = "weekly"
    case monthly = "monthly"
    case quarterly = "quarterly"
    case yearly = "yearly"
    case custom = "custom"
    
    public var displayName: String {
        switch self {
        case .daily: return "Daily"
        case .weekly: return "Weekly"
        case .monthly: return "Monthly"
        case .quarterly: return "Quarterly"
        case .yearly: return "Yearly"
        case .custom: return "Custom"
        }
    }
}

public enum ExportFormat: String, CaseIterable {
    case pdf = "pdf"
    case csv = "csv"
    case excel = "excel"
    case json = "json"
    
    public var displayName: String {
        switch self {
        case .pdf: return "PDF"
        case .csv: return "CSV"
        case .excel: return "Excel"
        case .json: return "JSON"
        }
    }
}

// MARK: - Date Formatter Extensions

extension DateFormatter {
    static let standard: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        return formatter
    }()
    
    static let monthYear: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM"
        return formatter
    }()
}